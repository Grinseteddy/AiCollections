openapi: 3.1.0
info:
  title: Reading API
  description: API for managing reading activities, bookmarks, reading positions, and personal notes
  contact:
    email: reading-api@example.com
    name: Library Reading Team
    url: https://api.library.example.com
  version: 1.0.0
  x-api-id: reading-api-003
  x-audience: internal
servers:
  - url: 'https://api.library.example.com/reading'
security:
  - openIdConnect:
      - reading:read
      - reading:write
      - reading:admin
tags:
  - name: Reading Sessions
    description: Track reading activities and sessions
  - name: Reading Positions
    description: Bookmark and reading position management
  - name: Notes
    description: Personal notes and annotations
  - name: Bookshelves
    description: Personal book organization and shelving

paths:
  /members/{memberId}/reading-sessions:
    get:
      description: Get reading sessions for a member
      operationId: getMemberReadingSessions
      tags:
        - Reading Sessions
      security:
        - openIdConnect:
            - reading:read
      parameters:
        - $ref: '#/components/parameters/MemberIdParameter'
        - $ref: '#/components/parameters/BookIdFilterParameter'
        - $ref: '#/components/parameters/DateFromParameter'
        - $ref: '#/components/parameters/DateToParameter'
        - $ref: '#/components/parameters/PageParameter'
        - $ref: '#/components/parameters/SizeParameter'
        - $ref: '#/components/parameters/VersionParameter'
      responses:
        '200':
          $ref: '#/components/responses/ReadingSessionListResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '500':
          $ref: '#/components/responses/ServiceNotAvailableResponse'
        default:
          $ref: '#/components/responses/DefaultResponse'

    post:
      description: Start a new reading session
      operationId: startReadingSession
      tags:
        - Reading Sessions
      security:
        - openIdConnect:
            - reading:write
      parameters:
        - $ref: '#/components/parameters/MemberIdParameter'
        - $ref: '#/components/parameters/VersionParameter'
      requestBody:
        $ref: '#/components/requestBodies/ReadingSessionToBeCreatedRequest'
      responses:
        '201':
          $ref: '#/components/responses/LinkToReadingSessionResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '500':
          $ref: '#/components/responses/ServiceNotAvailableResponse'
        default:
          $ref: '#/components/responses/DefaultResponse'

  /members/{memberId}/reading-sessions/{sessionId}:
    get:
      description: Get detailed information about a reading session
      operationId: getReadingSessionById
      tags:
        - Reading Sessions
      security:
        - openIdConnect:
            - reading:read
      parameters:
        - $ref: '#/components/parameters/MemberIdParameter'
        - $ref: '#/components/parameters/SessionIdParameter'
        - $ref: '#/components/parameters/VersionParameter'
      responses:
        '200':
          $ref: '#/components/responses/SingleReadingSessionResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '500':
          $ref: '#/components/responses/ServiceNotAvailableResponse'
        default:
          $ref: '#/components/responses/DefaultResponse'

    put:
      description: Update or end a reading session
      operationId: updateReadingSession
      tags:
        - Reading Sessions
      security:
        - openIdConnect:
            - reading:write
      parameters:
        - $ref: '#/components/parameters/MemberIdParameter'
        - $ref: '#/components/parameters/SessionIdParameter'
        - $ref: '#/components/parameters/VersionParameter'
      requestBody:
        $ref: '#/components/requestBodies/ReadingSessionToBeUpdatedRequest'
      responses:
        '200':
          $ref: '#/components/responses/LinkToReadingSessionResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '500':
          $ref: '#/components/responses/ServiceNotAvailableResponse'
        default:
          $ref: '#/components/responses/DefaultResponse'

  /members/{memberId}/reading-positions:
    get:
      description: Get all reading positions/bookmarks for a member
      operationId: getMemberReadingPositions
      tags:
        - Reading Positions
      security:
        - openIdConnect:
            - reading:read
      parameters:
        - $ref: '#/components/parameters/MemberIdParameter'
        - $ref: '#/components/parameters/BookIdFilterParameter'
        - $ref: '#/components/parameters/PageParameter'
        - $ref: '#/components/parameters/SizeParameter'
        - $ref: '#/components/parameters/VersionParameter'
      responses:
        '200':
          $ref: '#/components/responses/ReadingPositionListResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '500':
          $ref: '#/components/responses/ServiceNotAvailableResponse'
        default:
          $ref: '#/components/responses/DefaultResponse'

    post:
      description: Save a new reading position/bookmark
      operationId: createReadingPosition
      tags:
        - Reading Positions
      security:
        - openIdConnect:
            - reading:write
      parameters:
        - $ref: '#/components/parameters/MemberIdParameter'
        - $ref: '#/components/parameters/VersionParameter'
      requestBody:
        $ref: '#/components/requestBodies/ReadingPositionToBeCreatedRequest'
      responses:
        '201':
          $ref: '#/components/responses/LinkToReadingPositionResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '500':
          $ref: '#/components/responses/ServiceNotAvailableResponse'
        default:
          $ref: '#/components/responses/DefaultResponse'

  /members/{memberId}/reading-positions/{positionId}:
    get:
      description: Get detailed information about a reading position
      operationId: getReadingPositionById
      tags:
        - Reading Positions
      security:
        - openIdConnect:
            - reading:read
      parameters:
        - $ref: '#/components/parameters/MemberIdParameter'
        - $ref: '#/components/parameters/PositionIdParameter'
        - $ref: '#/components/parameters/VersionParameter'
      responses:
        '200':
          $ref: '#/components/responses/SingleReadingPositionResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '500':
          $ref: '#/components/responses/ServiceNotAvailableResponse'
        default:
          $ref: '#/components/responses/DefaultResponse'

    put:
      description: Update a reading position/bookmark
      operationId: updateReadingPosition
      tags:
        - Reading Positions
      security:
        - openIdConnect:
            - reading:write
      parameters:
        - $ref: '#/components/parameters/MemberIdParameter'
        - $ref: '#/components/parameters/PositionIdParameter'
        - $ref: '#/components/parameters/VersionParameter'
      requestBody:
        $ref: '#/components/requestBodies/ReadingPositionToBeUpdatedRequest'
      responses:
        '200':
          $ref: '#/components/responses/LinkToReadingPositionResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '500':
          $ref: '#/components/responses/ServiceNotAvailableResponse'
        default:
          $ref: '#/components/responses/DefaultResponse'

    delete:
      description: Delete a reading position/bookmark
      operationId: deleteReadingPosition
      tags:
        - Reading Positions
      security:
        - openIdConnect:
            - reading:write
      parameters:
        - $ref: '#/components/parameters/MemberIdParameter'
        - $ref: '#/components/parameters/PositionIdParameter'
        - $ref: '#/components/parameters/VersionParameter'
      responses:
        '200':
          $ref: '#/components/responses/SuccessfulOperationResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '500':
          $ref: '#/components/responses/ServiceNotAvailableResponse'
        default:
          $ref: '#/components/responses/DefaultResponse'

  /members/{memberId}/notes:
    get:
      description: Get all personal notes for a member
      operationId: getMemberNotes
      tags:
        - Notes
      security:
        - openIdConnect:
            - reading:read
      parameters:
        - $ref: '#/components/parameters/MemberIdParameter'
        - $ref: '#/components/parameters/BookIdFilterParameter'
        - $ref: '#/components/parameters/NoteTypeParameter'
        - $ref: '#/components/parameters/PageParameter'
        - $ref: '#/components/parameters/SizeParameter'
        - $ref: '#/components/parameters/VersionParameter'
      responses:
        '200':
          $ref: '#/components/responses/NoteListResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '500':
          $ref: '#/components/responses/ServiceNotAvailableResponse'
        default:
          $ref: '#/components/responses/DefaultResponse'

    post:
      description: Create a new personal note
      operationId: createNote
      tags:
        - Notes
      security:
        - openIdConnect:
            - reading:write
      parameters:
        - $ref: '#/components/parameters/MemberIdParameter'
        - $ref: '#/components/parameters/VersionParameter'
      requestBody:
        $ref: '#/components/requestBodies/NoteToBeCreatedRequest'
      responses:
        '201':
          $ref: '#/components/responses/LinkToNoteResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '500':
          $ref: '#/components/responses/ServiceNotAvailableResponse'
        default:
          $ref: '#/components/responses/DefaultResponse'

  /members/{memberId}/notes/{noteId}:
    get:
      description: Get detailed information about a note
      operationId: getNoteById
      tags:
        - Notes
      security:
        - openIdConnect:
            - reading:read
      parameters:
        - $ref: '#/components/parameters/MemberIdParameter'
        - $ref: '#/components/parameters/NoteIdParameter'
        - $ref: '#/components/parameters/VersionParameter'
      responses:
        '200':
          $ref: '#/components/responses/SingleNoteResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '500':
          $ref: '#/components/responses/ServiceNotAvailableResponse'
        default:
          $ref: '#/components/responses/DefaultResponse'

    put:
      description: Update a personal note
      operationId: updateNote
      tags:
        - Notes
      security:
        - openIdConnect:
            - reading:write
      parameters:
        - $ref: '#/components/parameters/MemberIdParameter'
        - $ref: '#/components/parameters/NoteIdParameter'
        - $ref: '#/components/parameters/VersionParameter'
      requestBody:
        $ref: '#/components/requestBodies/NoteToBeUpdatedRequest'
      responses:
        '200':
          $ref: '#/components/responses/LinkToNoteResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '500':
          $ref: '#/components/responses/ServiceNotAvailableResponse'
        default:
          $ref: '#/components/responses/DefaultResponse'

    delete:
      description: Delete a personal note
      operationId: deleteNote
      tags:
        - Notes
      security:
        - openIdConnect:
            - reading:write
      parameters:
        - $ref: '#/components/parameters/MemberIdParameter'
        - $ref: '#/components/parameters/NoteIdParameter'
        - $ref: '#/components/parameters/VersionParameter'
      responses:
        '200':
          $ref: '#/components/responses/SuccessfulOperationResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '500':
          $ref: '#/components/responses/ServiceNotAvailableResponse'
        default:
          $ref: '#/components/responses/DefaultResponse'

  /members/{memberId}/bookshelves:
    get:
      description: Get all personal bookshelves for a member
      operationId: getMemberBookshelves
      tags:
        - Bookshelves
      security:
        - openIdConnect:
            - reading:read
      parameters:
        - $ref: '#/components/parameters/MemberIdParameter'
        - $ref: '#/components/parameters/PageParameter'
        - $ref: '#/components/parameters/SizeParameter'
        - $ref: '#/components/parameters/VersionParameter'
      responses:
        '200':
          $ref: '#/components/responses/BookshelfListResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '500':
          $ref: '#/components/responses/ServiceNotAvailableResponse'
        default:
          $ref: '#/components/responses/DefaultResponse'

    post:
      description: Create a new personal bookshelf
      operationId: createBookshelf
      tags:
        - Bookshelves
      security:
        - openIdConnect:
            - reading:write
      parameters:
        - $ref: '#/components/parameters/MemberIdParameter'
        - $ref: '#/components/parameters/VersionParameter'
      requestBody:
        $ref: '#/components/requestBodies/BookshelfToBeCreatedRequest'
      responses:
        '201':
          $ref: '#/components/responses/LinkToBookshelfResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '500':
          $ref: '#/components/responses/ServiceNotAvailableResponse'
        default:
          $ref: '#/components/responses/DefaultResponse'

  /members/{memberId}/bookshelves/{bookshelfId}:
    get:
      description: Get detailed information about a bookshelf including its books
      operationId: getBookshelfById
      tags:
        - Bookshelves
      security:
        - openIdConnect:
            - reading:read
      parameters:
        - $ref: '#/components/parameters/MemberIdParameter'
        - $ref: '#/components/parameters/BookshelfIdParameter'
        - $ref: '#/components/parameters/VersionParameter'
      responses:
        '200':
          $ref: '#/components/responses/SingleBookshelfResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '500':
          $ref: '#/components/responses/ServiceNotAvailableResponse'
        default:
          $ref: '#/components/responses/DefaultResponse'

    put:
      description: Update bookshelf information
      operationId: updateBookshelf
      tags:
        - Bookshelves
      security:
        - openIdConnect:
            - reading:write
      parameters:
        - $ref: '#/components/parameters/MemberIdParameter'
        - $ref: '#/components/parameters/BookshelfIdParameter'
        - $ref: '#/components/parameters/VersionParameter'
      requestBody:
        $ref: '#/components/requestBodies/BookshelfToBeUpdatedRequest'
      responses:
        '200':
          $ref: '#/components/responses/LinkToBookshelfResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '500':
          $ref: '#/components/responses/ServiceNotAvailableResponse'
        default:
          $ref: '#/components/responses/DefaultResponse'

    delete:
      description: Delete a bookshelf
      operationId: deleteBookshelf
      tags:
        - Bookshelves
      security:
        - openIdConnect:
            - reading:write
      parameters:
        - $ref: '#/components/parameters/MemberIdParameter'
        - $ref: '#/components/parameters/BookshelfIdParameter'
        - $ref: '#/components/parameters/VersionParameter'
      responses:
        '200':
          $ref: '#/components/responses/SuccessfulOperationResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '500':
          $ref: '#/components/responses/ServiceNotAvailableResponse'
        default:
          $ref: '#/components/responses/DefaultResponse'

  /members/{memberId}/bookshelves/{bookshelfId}/books:
    post:
      description: Add a book to a bookshelf
      operationId: addBookToBookshelf
      tags:
        - Bookshelves
      security:
        - openIdConnect:
            - reading:write
      parameters:
        - $ref: '#/components/parameters/MemberIdParameter'
        - $ref: '#/components/parameters/BookshelfIdParameter'
        - $ref: '#/components/parameters/VersionParameter'
      requestBody:
        $ref: '#/components/requestBodies/BookshelfBookRequest'
      responses:
        '201':
          $ref: '#/components/responses/SuccessfulOperationResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '409':
          $ref: '#/components/responses/ConflictResponse'
        '500':
          $ref: '#/components/responses/ServiceNotAvailableResponse'
        default:
          $ref: '#/components/responses/DefaultResponse'

  /members/{memberId}/bookshelves/{bookshelfId}/books/{bookId}:
    delete:
      description: Remove a book from a bookshelf
      operationId: removeBookFromBookshelf
      tags:
        - Bookshelves
      security:
        - openIdConnect:
            - reading:write
      parameters:
        - $ref: '#/components/parameters/MemberIdParameter'
        - $ref: '#/components/parameters/BookshelfIdParameter'
        - $ref: '#/components/parameters/BookIdParameter'
        - $ref: '#/components/parameters/VersionParameter'
      responses:
        '200':
          $ref: '#/components/responses/SuccessfulOperationResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '500':
          $ref: '#/components/responses/ServiceNotAvailableResponse'
        default:
          $ref: '#/components/responses/DefaultResponse'

components:
  parameters:
    MemberIdParameter:
      name: memberId
      description: Member identifier
      required: true
      in: path
      schema:
        type: string
        format: uuid
        examples:
          - 448b5bc-a9bc-4036-8899-c77f781a76d5

    SessionIdParameter:
      name: sessionId
      description: Reading session identifier
      required: true
      in: path
      schema:
        type: string
        format: uuid
        examples:
          - 123e4567-e89b-12d3-a456-426614174000

    PositionIdParameter:
      name: positionId
      description: Reading position identifier
      required: true
      in: path
      schema:
        type: string
        format: uuid
        examples:
          - 550e8400-e29b-41d4-a716-446655440000

    NoteIdParameter:
      name: noteId
      description: Note identifier
      required: true
      in: path
      schema:
        type: string
        format: uuid
        examples:
          - 6ba7b810-9dad-11d1-80b4-00c04fd430c8

    BookshelfIdParameter:
      name: bookshelfId
      description: Bookshelf identifier
      required: true
      in: path
      schema:
        type: string
        format: uuid
        examples:
          - 6ba7b811-9dad-11d1-80b4-00c04fd430c8

    BookIdParameter:
      name: bookId
      description: Book identifier
      required: true
      in: path
      schema:
        type: string
        format: uuid
        examples:
          - a07d62e1-5e2e-4e15-b50d-6ed412175443

    BookIdFilterParameter:
      name: bookId
      description: Filter by book identifier
      in: query
      required: false
      schema:
        type: string
        format: uuid
        examples:
          - a07d62e1-5e2e-4e15-b50d-6ed412175443

    DateFromParameter:
      name: dateFrom
      description: Filter sessions from this date (inclusive)
      in: query
      required: false
      schema:
        type: string
        format: date
        examples:
          - "2024-07-01"

    DateToParameter:
      name: dateTo
      description: Filter sessions to this date (inclusive)
      in: query
      required: false
      schema:
        type: string
        format: date
        examples:
          - "2024-07-31"

    NoteTypeParameter:
      name: type
      description: Filter notes by type
      in: query
      required: false
      schema:
        type: string
        enum:
          - ANNOTATION
          - REVIEW
          - QUOTE
          - BOOKMARK
          - GENERAL
        examples:
          - ANNOTATION

    PageParameter:
      name: page
      description: Page number for pagination (0-based)
      in: query
      required: false
      schema:
        type: integer
        minimum: 0
        default: 0
        examples:
          - 0

    SizeParameter:
      name: size
      description: Number of results per page
      in: query
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
        examples:
          - 20

    VersionParameter:
      name: x-version
      description: Version of the API specification
      in: header
      required: true
      schema:
        type: string
        x-extensible-enum:
          - 1.0.0
        default: 1.0.0
        examples:
          - 1.0.0

  responses:
    BadRequestResponse:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    ForbiddenResponse:
      description: Forbidden

    NotFoundResponse:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    ConflictResponse:
      description: Conflict - resource already exists or operation not allowed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    ServiceNotAvailableResponse:
      description: Service not available
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    DefaultResponse:
      description: Unexpected error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    SuccessfulOperationResponse:
      description: Successful operation

    LinkToReadingSessionResponse:
      description: Link to reading session
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Link"

    LinkToReadingPositionResponse:
      description: Link to reading position
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Link"

    LinkToNoteResponse:
      description: Link to note
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Link"

    LinkToBookshelfResponse:
      description: Link to bookshelf
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Link"

    ReadingSessionListResponse:
      description: List of reading sessions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ReadingSessionList'

    SingleReadingSessionResponse:
      description: Detailed reading session information
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ReadingSession'

    ReadingPositionListResponse:
      description: List of reading positions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ReadingPositionList'

    SingleReadingPositionResponse:
      description: Detailed reading position information
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ReadingPosition'

    NoteListResponse:
      description: List of notes
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NoteList'

    SingleNoteResponse:
      description: Detailed note information
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Note'

    BookshelfListResponse:
      description: List of bookshelves
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BookshelfList'

    SingleBookshelfResponse:
      description: Detailed bookshelf information
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Bookshelf'

  requestBodies:
    ReadingSessionToBeCreatedRequest:
      description: Start a new reading session
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ReadingSessionToBeCreated'

    ReadingSessionToBeUpdatedRequest:
      description: Update a reading session
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ReadingSession'

    ReadingPositionToBeCreatedRequest:
      description: Create a new reading position
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ReadingPositionToBeCreated'

    ReadingPositionToBeUpdatedRequest:
      description: Update a reading position
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ReadingPosition'

    NoteToBeCreatedRequest:
      description: Create a new note
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NoteToBeCreated'

    NoteToBeUpdatedRequest:
      description: Update a note
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Note'

    BookshelfToBeCreatedRequest:
      description: Create a new bookshelf
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BookshelfToBeCreated'

    BookshelfToBeUpdatedRequest:
      description: Update a bookshelf
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Bookshelf'

    BookshelfBookRequest:
      description: Add a book to a bookshelf
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BookshelfBook'

  schemas:
    Error:
      description: An error object used for error responses
      type: object
      required:
        - title
        - status
        - timestamp
      properties:
        title:
          description: A short description of the problem
          type: string
          minLength: 2
          maxLength: 255
          examples:
            - reading-session-not-found
        detail:
          description: A human-readable description of the problem
          type: string
          examples:
            - The requested reading session could not be found.
        timestamp:
          description: Point in time when the error occurred
          type: string
          format: date-time
          examples:
            - 2024-07-01T23:32:54+01:00
        traceparent:
          description: Tracking ID of the API journey
          type: string
          pattern: ^[0-9]{2}-[0-9a-z]{16}-[0-9a-z]{8}-[0-9a-z]{1}[0-9a-z]{1}$
          examples:
            - 00-0af7651916cd43dd8448eb211c80319c-b7ad6b7169203331-01
        severity:
          description: Severity of the according error
          type: string
          enum:
            - FATAL
            - ERROR
            - WARNING
            - INFO
          examples:
            - ERROR

    Link:
      description: Link to an entity
      type: object
      required:
        - type
        - link
      properties:
        type:
          description: Type name of the object
          type: string
          minLength: 2
          maxLength: 155
          examples:
            - ReadingSession
        link:
          description: URL to the according entity
          type: string
          format: uri
          examples:
            - https://api.library.example.com/reading/members/74d870fa-9e93-4ffd-907e-038c85e8bc20/reading-sessions/123e4567-e89b-12d3-a456-426614174000

    ReadingSession:
      description: A reading session tracking when a member reads a book
      type: object
      allOf:
        - $ref: '#/components/schemas/ReadingSessionToBeCreated'
      required:
        - sessionId
        - startTime
      properties:
        sessionId:
          description: Unique identifier for the reading session
          type: string
          format: uuid
          examples:
            - 123e4567-e89b-12d3-a456-426614174000
        startTime:
          description: When the reading session started
          type: string
          format: date-time
          examples:
            - "2024-07-01T10:00:00Z"
        endTime:
          description: When the reading session ended (null if ongoing)
          type: string
          format: date-time
          nullable: true
          examples:
            - "2024-07-01T11:30:00Z"

    ReadingSessionToBeCreated:
      description: Information for creating a reading session
      type: object
      required:
        - bookId
      properties:
        bookId:
          description: ID of the book being read
          type: string
          format: uuid
          examples:
            - a07d62e1-5e2e-4e15-b50d-6ed412175443
        startingPosition:
          description: Starting page or position information
          type: string
          maxLength: 100
          examples:
            - "Chapter 1, Page 15"
        notes:
          description: Optional notes about the reading session
          type: string
          maxLength: 1000
          examples:
            - "Started reading during lunch break"

    ReadingSessionList:
      description: List of reading sessions
      type: object
      required:
        - sessions
        - totalElements
        - page
        - size
      properties:
        sessions:
          type: array
          items:
            $ref: '#/components/schemas/ReadingSession'
        totalElements:
          type: integer
          minimum: 0
          examples:
            - 250
        page:
          type: integer
          minimum: 0
          examples:
            - 0
        size:
          type: integer
          minimum: 1
          examples:
            - 20

    ReadingPosition:
      description: A bookmark or reading position in a book
      type: object
      allOf:
        - $ref: '#/components/schemas/ReadingPositionToBeCreated'
      required:
        - positionId
        - createdAt
      properties:
        positionId:
          description: Unique identifier for the reading position
          type: string
          format: uuid
          examples:
            - 550e8400-e29b-41d4-a716-446655440000
        createdAt:
          description: When the position was saved
          type: string
          format: date-time
          examples:
            - "2024-07-01T10:30:00Z"
        updatedAt:
          description: When the position was last updated
          type: string
          format: date-time
          examples:
            - "2024-07-01T10:35:00Z"

    ReadingPositionToBeCreated:
      description: Information for creating a reading position
      type: object
      required:
        - bookId
        - position
      properties:
        bookId:
          description: ID of the book
          type: string
          format: uuid
          examples:
            - a07d62e1-5e2e-4e15-b50d-6ed412175443
        position:
          description: Position in the book (page number, chapter, etc.)
          type: string
          maxLength: 200
          examples:
            - "Chapter 5, Page 127"
        positionType:
          description: Type of position marker
          type: string
          enum:
            - PAGE
            - CHAPTER
            - SECTION
            - BOOKMARK
            - LAST_READ
          examples:
            - PAGE
        notes:
          description: Optional notes about this position
          type: string
          maxLength: 500
          examples:
            - "Interesting plot twist here"

    ReadingPositionList:
      description: List of reading positions
      type: object
      required:
        - positions
        - totalElements
        - page
        - size
      properties:
        positions:
          type: array
          items:
            $ref: '#/components/schemas/ReadingPosition'
        totalElements:
          type: integer
          minimum: 0
          examples:
            - 50
        page:
          type: integer
          minimum: 0
          examples:
            - 0
        size:
          type: integer
          minimum: 1
          examples:
            - 20

    Note:
      description: A personal note or annotation
      type: object
      allOf:
        - $ref: '#/components/schemas/NoteToBeCreated'
      required:
        - noteId
        - createdAt
      properties:
        noteId:
          description: Unique identifier for the note
          type: string
          format: uuid
          examples:
            - 6ba7b810-9dad-11d1-80b4-00c04fd430c8
        createdAt:
          description: When the note was created
          type: string
          format: date-time
          examples:
            - "2024-07-01T15:30:00Z"
        updatedAt:
          description: When the note was last updated
          type: string
          format: date-time
          examples:
            - "2024-07-01T15:35:00Z"

    NoteToBeCreated:
      description: Information for creating a note
      type: object
      required:
        - bookId
        - content
        - noteType
      properties:
        bookId:
          description: ID of the book this note relates to
          type: string
          format: uuid
          examples:
            - a07d62e1-5e2e-4e15-b50d-6ed412175443
        title:
          description: Optional title for the note
          type: string
          maxLength: 200
          examples:
            - "Character Analysis - Elizabeth Bennet"
        content:
          description: Content of the note
          type: string
          maxLength: 5000
          examples:
            - "Elizabeth's wit and independence make her a compelling protagonist..."
        noteType:
          description: Type of note
          type: string
          enum:
            - ANNOTATION
            - REVIEW
            - QUOTE
            - BOOKMARK
            - GENERAL
          examples:
            - ANNOTATION
        position:
          description: Position in the book where this note applies
          type: string
          maxLength: 200
          examples:
            - "Chapter 3, Page 45"
        isPrivate:
          description: Whether this note is private to the member
          type: boolean
          default: true
          examples:
            - true
        tags:
          description: Tags for organizing notes
          type: array
          items:
            type: string
            maxLength: 50
          examples:
            - ["character-development", "themes"]

    NoteList:
      description: List of notes
      type: object
      required:
        - notes
        - totalElements
        - page
        - size
      properties:
        notes:
          type: array
          items:
            $ref: '#/components/schemas/Note'
        totalElements:
          type: integer
          minimum: 0
          examples:
            - 125
        page:
          type: integer
          minimum: 0
          examples:
            - 0
        size:
          type: integer
          minimum: 1
          examples:
            - 20

    Bookshelf:
      description: A personal bookshelf for organizing books
      type: object
      allOf:
        - $ref: '#/components/schemas/BookshelfToBeCreated'
      required:
        - bookshelfId
        - createdAt
      properties:
        bookshelfId:
          description: Unique identifier for the bookshelf
          type: string
          format: uuid
          examples:
            - 6ba7b811-9dad-11d1-80b4-00c04fd430c8
        createdAt:
          description: When the bookshelf was created
          type: string
          format: date-time
          examples:
            - "2024-07-01T09:00:00Z"
        updatedAt:
          description: When the bookshelf was last updated
          type: string
          format: date-time
          examples:
            - "2024-07-01T09:15:00Z"
        books:
          description: Books in this bookshelf
          type: array
          items:
            $ref: '#/components/schemas/BookshelfBook'

    BookshelfToBeCreated:
      description: Information for creating a bookshelf
      type: object
      required:
        - name
      properties:
        name:
          description: Name of the bookshelf
          type: string
          minLength: 1
          maxLength: 200
          examples:
            - "Science Fiction Favorites"
        description:
          description: Description of the bookshelf
          type: string
          maxLength: 1000
          examples:
            - "My collection of favorite science fiction novels"
        isPublic:
          description: Whether this bookshelf is visible to other members
          type: boolean
          default: false
          examples:
            - false
        tags:
          description: Tags for categorizing the bookshelf
          type: array
          items:
            type: string
            maxLength: 50
          examples:
            - ["sci-fi", "favorites", "novels"]

    BookshelfList:
      description: List of bookshelves
      type: object
      required:
        - bookshelves
        - totalElements
        - page
        - size
      properties:
        bookshelves:
          type: array
          items:
            $ref: '#/components/schemas/Bookshelf'
        totalElements:
          type: integer
          minimum: 0
          examples:
            - 15
        page:
          type: integer
          minimum: 0
          examples:
            - 0
        size:
          type: integer
          minimum: 1
          examples:
            - 20

    BookshelfBook:
      description: A book in a bookshelf with additional metadata
      type: object
      required:
        - bookId
      properties:
        bookId:
          description: ID of the book
          type: string
          format: uuid
          examples:
            - a07d62e1-5e2e-4e15-b50d-6ed412175443
        addedAt:
          description: When the book was added to the bookshelf
          type: string
          format: date-time
          examples:
            - "2024-07-01T14:30:00Z"
        personalRating:
          description: Member's personal rating of the book
          type: integer
          minimum: 1
          maximum: 5
          examples:
            - 5
        readingStatus:
          description: Member's reading status for this book
          type: string
          enum:
            - WANT_TO_READ
            - CURRENTLY_READING
            - READ
            - DNF
          examples:
            - READ
        personalNotes:
          description: Personal notes about the book
          type: string
          maxLength: 1000
          examples:
            - "Brilliant world-building and character development"
        dateRead:
          description: Date when the member finished reading the book
          type: string
          format: date
          nullable: true
          examples:
            - "2024-06-15"

  securitySchemes:
    openIdConnect:
      type: openIdConnect
      description: Security scheme for reading operations
      openIdConnectUrl: "https://idp.library.example.com/configuration"