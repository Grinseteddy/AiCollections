openapi: 3.1.0
info:
  title: Catalog Management API
  description: |
    API for managing library catalog entries, including books, authors, publishers, and related metadata.
    This API is part of the Catalog Management bounded context and handles the creation, retrieval, 
    and updating of catalog entries.
  version: 1.0.0
  x-api-id: 2a7f8c1d-4b6e-4f32-bc89-d74e9fa3b1c8
  x-audience: external-public
  contact:
    name: Catalog Management Team
    email: catalog-api@library.com

servers:
  - url: 'https://api.library.com/catalog/v1'
    description: Production server
  - url: 'https://api-staging.library.com/catalog/v1'
    description: Staging server

security:
  - openIdConnect:
      - catalog:read
      - catalog:write
      - catalog:admin

tags:
  - name: Catalog Entries
    description: Operations for managing catalog entries
  - name: Authors
    description: Operations for managing authors
  - name: Publishers
    description: Operations for managing publishers
  - name: Search
    description: Catalog search operations
    externalDocs:
      description: Links to Catalog Search bounded context
      url: https://api.library.com/search/v1

paths:
  /catalog-entries:
    get:
      operationId: getCatalogEntries
      summary: Retrieve catalog entries with optional filtering
      tags:
        - Catalog Entries
      security:
        - openIdConnect:
            - catalog:read
      parameters:
        - $ref: '#/components/parameters/AuthorIdParameter'
        - $ref: '#/components/parameters/PublisherIdParameter'
        - $ref: '#/components/parameters/IsbnParameter'
        - $ref: '#/components/parameters/TagParameter'
        - $ref: '#/components/parameters/PageParameter'
        - $ref: '#/components/parameters/PageSizeParameter'
        - $ref: '#/components/parameters/VersionParameter'
      responses:
        '200':
          $ref: '#/components/responses/CatalogEntryListResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '500':
          $ref: '#/components/responses/ServiceNotAvailableResponse'

    post:
      operationId: createCatalogEntry
      summary: Create a new catalog entry
      description: |
        Creates a new catalog entry in the library catalog. This operation triggers
        the "Catalog entry created" event which may be consumed by other bounded contexts
        such as Catalog Search, Audio Summary, and Notification services.
      tags:
        - Catalog Entries
      security:
        - openIdConnect:
            - catalog:write
      parameters:
        - $ref: '#/components/parameters/VersionParameter'
      requestBody:
        $ref: '#/components/requestBodies/CatalogEntryCreateRequest'
      responses:
        '201':
          $ref: '#/components/responses/CatalogEntryCreatedResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '409':
          $ref: '#/components/responses/ConflictResponse'
        '500':
          $ref: '#/components/responses/ServiceNotAvailableResponse'

  /catalog-entries/{catalogEntryId}:
    get:
      operationId: getCatalogEntryById
      summary: Retrieve a specific catalog entry
      tags:
        - Catalog Entries
      security:
        - openIdConnect:
            - catalog:read
      parameters:
        - $ref: '#/components/parameters/CatalogEntryIdParameter'
        - $ref: '#/components/parameters/VersionParameter'
      responses:
        '200':
          $ref: '#/components/responses/CatalogEntryResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '500':
          $ref: '#/components/responses/ServiceNotAvailableResponse'

    put:
      operationId: updateCatalogEntry
      summary: Update an existing catalog entry
      description: |
        Updates an existing catalog entry. This operation triggers the "Catalog entry updated" 
        event which may be consumed by Catalog Search and other dependent contexts.
      tags:
        - Catalog Entries
      security:
        - openIdConnect:
            - catalog:write
      parameters:
        - $ref: '#/components/parameters/CatalogEntryIdParameter'
        - $ref: '#/components/parameters/VersionParameter'
      requestBody:
        $ref: '#/components/requestBodies/CatalogEntryUpdateRequest'
      responses:
        '200':
          $ref: '#/components/responses/CatalogEntryResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '409':
          $ref: '#/components/responses/ConflictResponse'
        '500':
          $ref: '#/components/responses/ServiceNotAvailableResponse'

    delete:
      operationId: deleteCatalogEntry
      summary: Delete a catalog entry
      description: |
        Soft deletes a catalog entry from the catalog. Note that this may affect
        related contexts such as Lending and Bookshelf if the entry is currently in use.
      tags:
        - Catalog Entries
      security:
        - openIdConnect:
            - catalog:admin
      parameters:
        - $ref: '#/components/parameters/CatalogEntryIdParameter'
        - $ref: '#/components/parameters/VersionParameter'
      responses:
        '204':
          description: Catalog entry successfully deleted
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '409':
          $ref: '#/components/responses/ConflictResponse'
        '500':
          $ref: '#/components/responses/ServiceNotAvailableResponse'

  /catalog-entries/{catalogEntryId}/tags:
    post:
      operationId: addTagToCatalogEntry
      summary: Add a tag to a catalog entry
      tags:
        - Catalog Entries
      security:
        - openIdConnect:
            - catalog:write
      parameters:
        - $ref: '#/components/parameters/CatalogEntryIdParameter'
        - $ref: '#/components/parameters/VersionParameter'
      requestBody:
        $ref: '#/components/requestBodies/TagAddRequest'
      responses:
        '200':
          $ref: '#/components/responses/CatalogEntryResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '500':
          $ref: '#/components/responses/ServiceNotAvailableResponse'

    delete:
      operationId: removeTagFromCatalogEntry
      summary: Remove a tag from a catalog entry
      tags:
        - Catalog Entries
      security:
        - openIdConnect:
            - catalog:write
      parameters:
        - $ref: '#/components/parameters/CatalogEntryIdParameter'
        - $ref: '#/components/parameters/TagNameParameter'
        - $ref: '#/components/parameters/VersionParameter'
      responses:
        '200':
          $ref: '#/components/responses/CatalogEntryResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '500':
          $ref: '#/components/responses/ServiceNotAvailableResponse'

  /authors:
    get:
      operationId: getAuthors
      summary: Retrieve authors
      tags:
        - Authors
      security:
        - openIdConnect:
            - catalog:read
      parameters:
        - $ref: '#/components/parameters/AuthorNameParameter'
        - $ref: '#/components/parameters/PageParameter'
        - $ref: '#/components/parameters/PageSizeParameter'
        - $ref: '#/components/parameters/VersionParameter'
      responses:
        '200':
          $ref: '#/components/responses/AuthorListResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/ServiceNotAvailableResponse'

    post:
      operationId: createAuthor
      summary: Create a new author
      tags:
        - Authors
      security:
        - openIdConnect:
            - catalog:write
      parameters:
        - $ref: '#/components/parameters/VersionParameter'
      requestBody:
        $ref: '#/components/requestBodies/AuthorCreateRequest'
      responses:
        '201':
          $ref: '#/components/responses/AuthorCreatedResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '409':
          $ref: '#/components/responses/ConflictResponse'
        '500':
          $ref: '#/components/responses/ServiceNotAvailableResponse'

  /authors/{authorId}:
    get:
      operationId: getAuthorById
      summary: Retrieve a specific author
      tags:
        - Authors
      security:
        - openIdConnect:
            - catalog:read
      parameters:
        - $ref: '#/components/parameters/AuthorIdPathParameter'
        - $ref: '#/components/parameters/VersionParameter'
      responses:
        '200':
          $ref: '#/components/responses/AuthorResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '500':
          $ref: '#/components/responses/ServiceNotAvailableResponse'

    put:
      operationId: updateAuthor
      summary: Update an author
      tags:
        - Authors
      security:
        - openIdConnect:
            - catalog:write
      parameters:
        - $ref: '#/components/parameters/AuthorIdPathParameter'
        - $ref: '#/components/parameters/VersionParameter'
      requestBody:
        $ref: '#/components/requestBodies/AuthorUpdateRequest'
      responses:
        '200':
          $ref: '#/components/responses/AuthorResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '500':
          $ref: '#/components/responses/ServiceNotAvailableResponse'

  /publishers:
    get:
      operationId: getPublishers
      summary: Retrieve publishers
      tags:
        - Publishers
      security:
        - openIdConnect:
            - catalog:read
      parameters:
        - $ref: '#/components/parameters/PublisherNameParameter'
        - $ref: '#/components/parameters/PageParameter'
        - $ref: '#/components/parameters/PageSizeParameter'
        - $ref: '#/components/parameters/VersionParameter'
      responses:
        '200':
          $ref: '#/components/responses/PublisherListResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/ServiceNotAvailableResponse'

    post:
      operationId: createPublisher
      summary: Create a new publisher
      tags:
        - Publishers
      security:
        - openIdConnect:
            - catalog:write
      parameters:
        - $ref: '#/components/parameters/VersionParameter'
      requestBody:
        $ref: '#/components/requestBodies/PublisherCreateRequest'
      responses:
        '201':
          $ref: '#/components/responses/PublisherCreatedResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '409':
          $ref: '#/components/responses/ConflictResponse'
        '500':
          $ref: '#/components/responses/ServiceNotAvailableResponse'

  /publishers/{publisherId}:
    get:
      operationId: getPublisherById
      summary: Retrieve a specific publisher
      tags:
        - Publishers
      security:
        - openIdConnect:
            - catalog:read
      parameters:
        - $ref: '#/components/parameters/PublisherIdPathParameter'
        - $ref: '#/components/parameters/VersionParameter'
      responses:
        '200':
          $ref: '#/components/responses/PublisherResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '500':
          $ref: '#/components/responses/ServiceNotAvailableResponse'

    put:
      operationId: updatePublisher
      summary: Update a publisher
      tags:
        - Publishers
      security:
        - openIdConnect:
            - catalog:write
      parameters:
        - $ref: '#/components/parameters/PublisherIdPathParameter'
        - $ref: '#/components/parameters/VersionParameter'
      requestBody:
        $ref: '#/components/requestBodies/PublisherUpdateRequest'
      responses:
        '200':
          $ref: '#/components/responses/PublisherResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '500':
          $ref: '#/components/responses/ServiceNotAvailableResponse'

components:
  parameters:
    CatalogEntryIdParameter:
      name: catalogEntryId
      in: path
      required: true
      description: Unique identifier of the catalog entry
      schema:
        type: string
        format: uuid

    AuthorIdParameter:
      name: authorId
      in: query
      description: Filter by author ID
      schema:
        type: string
        format: uuid

    AuthorIdPathParameter:
      name: authorId
      in: path
      required: true
      description: Unique identifier of the author
      schema:
        type: string
        format: uuid

    PublisherIdParameter:
      name: publisherId
      in: query
      description: Filter by publisher ID
      schema:
        type: string
        format: uuid

    PublisherIdPathParameter:
      name: publisherId
      in: path
      required: true
      description: Unique identifier of the publisher
      schema:
        type: string
        format: uuid

    IsbnParameter:
      name: isbn
      in: query
      description: Filter by ISBN
      schema:
        type: string
        pattern: '^(?:ISBN(?:-1[03])?:? )?(?=[0-9X]{10}$|(?=(?:[0-9]+[- ]){3})[- 0-9X]{13}$|97[89][0-9]{10}$|(?=(?:[0-9]+[- ]){4})[- 0-9]{17}$)(?:97[89][- ]?)?[0-9]{1,5}[- ]?[0-9]+[- ]?[0-9]+[- ]?[0-9X]$'

    TagParameter:
      name: tag
      in: query
      description: Filter by tag
      schema:
        type: string
        maxLength: 50

    TagNameParameter:
      name: tagName
      in: query
      required: true
      description: Name of the tag to remove
      schema:
        type: string
        maxLength: 50

    AuthorNameParameter:
      name: name
      in: query
      description: Filter authors by name (partial match)
      schema:
        type: string
        maxLength: 200

    PublisherNameParameter:
      name: name
      in: query
      description: Filter publishers by name (partial match)
      schema:
        type: string
        maxLength: 200

    PageParameter:
      name: page
      in: query
      description: Page number for pagination (starts at 1)
      schema:
        type: integer
        minimum: 1
        default: 1

    PageSizeParameter:
      name: pageSize
      in: query
      description: Number of items per page
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20

    VersionParameter:
      name: x-api-version
      in: header
      required: true
      description: API version
      schema:
        type: string
        default: "1.0.0"
        enum: ["1.0.0"]

  schemas:
    CatalogEntry:
      type: object
      description: |
        A catalog entry represents a book or publication in the library catalog.
        This is the central aggregate of the Catalog Management bounded context.
      required:
        - id
        - title
        - authors
        - publishedOn
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier (Schlüssel)
        title:
          type: string
          minLength: 1
          maxLength: 500
          description: Title of the publication (Titel)
        authors:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/Author'
          description: List of authors (Autor)
        publisher:
          $ref: '#/components/schemas/Publisher'
          description: Publisher information (Verlag)
        isbn:
          type: string
          pattern: '^(?:ISBN(?:-1[03])?:? )?(?=[0-9X]{10}$|(?=(?:[0-9]+[- ]){3})[- 0-9X]{13}$|97[89][0-9]{10}$|(?=(?:[0-9]+[- ]){4})[- 0-9]{17}$)(?:97[89][- ]?)?[0-9]{1,5}[- ]?[0-9]+[- ]?[0-9]+[- ]?[0-9X]$'
          description: International Standard Book Number (ISBN)
        publishedOn:
          type: string
          format: date
          description: Publication date (Veröffentlicht am)
        abstract:
          type: string
          maxLength: 2000
          description: Brief description or abstract (Kurzfassung)
        tags:
          type: array
          items:
            type: string
            maxLength: 50
          description: Keywords or tags for categorization (Stichwort)
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the entry was created (Erzeugt um)
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the entry was last updated (Geändert um)
          readOnly: true

    CatalogEntryCreate:
      type: object
      description: Request body for creating a new catalog entry
      required:
        - title
        - authorIds
        - publishedOn
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 500
          description: Title of the publication
        authorIds:
          type: array
          minItems: 1
          items:
            type: string
            format: uuid
          description: List of author IDs
        publisherId:
          type: string
          format: uuid
          description: Publisher ID
        isbn:
          type: string
          pattern: '^(?:ISBN(?:-1[03])?:? )?(?=[0-9X]{10}$|(?=(?:[0-9]+[- ]){3})[- 0-9X]{13}$|97[89][0-9]{10}$|(?=(?:[0-9]+[- ]){4})[- 0-9]{17}$)(?:97[89][- ]?)?[0-9]{1,5}[- ]?[0-9]+[- ]?[0-9]+[- ]?[0-9X]$'
          description: International Standard Book Number
        publishedOn:
          type: string
          format: date
          description: Publication date
        abstract:
          type: string
          maxLength: 2000
          description: Brief description or abstract
        tags:
          type: array
          items:
            type: string
            maxLength: 50
          description: Keywords or tags

    CatalogEntryUpdate:
      type: object
      description: Request body for updating a catalog entry
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 500
        authorIds:
          type: array
          minItems: 1
          items:
            type: string
            format: uuid
        publisherId:
          type: string
          format: uuid
        isbn:
          type: string
          pattern: '^(?:ISBN(?:-1[03])?:? )?(?=[0-9X]{10}$|(?=(?:[0-9]+[- ]){3})[- 0-9X]{13}$|97[89][0-9]{10}$|(?=(?:[0-9]+[- ]){4})[- 0-9]{17}$)(?:97[89][- ]?)?[0-9]{1,5}[- ]?[0-9]+[- ]?[0-9]+[- ]?[0-9X]$'
        publishedOn:
          type: string
          format: date
        abstract:
          type: string
          maxLength: 2000
        tags:
          type: array
          items:
            type: string
            maxLength: 50

    Author:
      type: object
      description: Author entity (Autor)
      required:
        - id
        - name
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier
        name:
          type: string
          minLength: 1
          maxLength: 200
          description: Full name of the author
        biography:
          type: string
          maxLength: 5000
          description: Author biography
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true

    AuthorCreate:
      type: object
      description: Request body for creating a new author
      required:
        - name
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 200
          description: Full name of the author
        biography:
          type: string
          maxLength: 5000
          description: Author biography

    AuthorUpdate:
      type: object
      description: Request body for updating an author
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 200
        biography:
          type: string
          maxLength: 5000

    Publisher:
      type: object
      description: Publisher entity (Verlag)
      required:
        - id
        - name
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier
        name:
          type: string
          minLength: 1
          maxLength: 200
          description: Name of the publisher
        location:
          type: string
          maxLength: 200
          description: Publisher location/address
        website:
          type: string
          format: uri
          description: Publisher website
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true

    PublisherCreate:
      type: object
      description: Request body for creating a new publisher
      required:
        - name
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 200
          description: Name of the publisher
        location:
          type: string
          maxLength: 200
          description: Publisher location
        website:
          type: string
          format: uri
          description: Publisher website

    PublisherUpdate:
      type: object
      description: Request body for updating a publisher
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 200
        location:
          type: string
          maxLength: 200
        website:
          type: string
          format: uri

    TagAdd:
      type: object
      description: Request to add a tag to a catalog entry
      required:
        - tag
      properties:
        tag:
          type: string
          minLength: 1
          maxLength: 50
          description: Tag name to add

    PaginationMetadata:
      type: object
      description: Pagination metadata
      required:
        - page
        - pageSize
        - totalItems
        - totalPages
      properties:
        page:
          type: integer
          minimum: 1
          description: Current page number
        pageSize:
          type: integer
          minimum: 1
          description: Items per page
        totalItems:
          type: integer
          minimum: 0
          description: Total number of items
        totalPages:
          type: integer
          minimum: 0
          description: Total number of pages

    Error:
      type: object
      description: Error response structure
      required:
        - code
        - message
      properties:
        code:
          type: string
          description: Error code identifier
        message:
          type: string
          description: Human-readable error message
        details:
          type: object
          description: Additional error details
        timestamp:
          type: string
          format: date-time
          description: Timestamp of the error

  responses:
    CatalogEntryResponse:
      description: Single catalog entry response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CatalogEntry'

    CatalogEntryListResponse:
      description: Paginated list of catalog entries
      content:
        application/json:
          schema:
            type: object
            required:
              - data
              - pagination
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/CatalogEntry'
              pagination:
                $ref: '#/components/schemas/PaginationMetadata'

    CatalogEntryCreatedResponse:
      description: Catalog entry created successfully
      headers:
        Location:
          description: URI of the created resource
          schema:
            type: string
            format: uri
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CatalogEntry'

    AuthorResponse:
      description: Single author response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Author'

    AuthorListResponse:
      description: Paginated list of authors
      content:
        application/json:
          schema:
            type: object
            required:
              - data
              - pagination
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
              pagination:
                $ref: '#/components/schemas/PaginationMetadata'

    AuthorCreatedResponse:
      description: Author created successfully
      headers:
        Location:
          description: URI of the created resource
          schema:
            type: string
            format: uri
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Author'

    PublisherResponse:
      description: Single publisher response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Publisher'

    PublisherListResponse:
      description: Paginated list of publishers
      content:
        application/json:
          schema:
            type: object
            required:
              - data
              - pagination
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Publisher'
              pagination:
                $ref: '#/components/schemas/PaginationMetadata'

    PublisherCreatedResponse:
      description: Publisher created successfully
      headers:
        Location:
          description: URI of the created resource
          schema:
            type: string
            format: uri
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Publisher'

    BadRequestResponse:
      description: Invalid request parameters or body
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: BAD_REQUEST
            message: Invalid input data
            details:
              field: isbn
              reason: Invalid ISBN format
            timestamp: '2025-10-02T14:30:00Z'

    NotFoundResponse:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: NOT_FOUND
            message: Catalog entry not found
            timestamp: '2025-10-02T14:30:00Z'

    ForbiddenResponse:
      description: Access forbidden - insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: FORBIDDEN
            message: Insufficient permissions to perform this operation
            timestamp: '2025-10-02T14:30:00Z'

    ConflictResponse:
      description: Resource conflict (e.g., duplicate ISBN)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: CONFLICT
            message: A catalog entry with this ISBN already exists
            details:
              isbn: '978-3-16-148410-0'
              existingEntryId: '123e4567-e89b-12d3-a456-426614174000'
            timestamp: '2025-10-02T14:30:00Z'

    ServiceNotAvailableResponse:
      description: Service temporarily unavailable
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: SERVICE_UNAVAILABLE
            message: The catalog service is temporarily unavailable
            timestamp: '2025-10-02T14:30:00Z'

  requestBodies:
    CatalogEntryCreateRequest:
      description: Request body for creating a catalog entry
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CatalogEntryCreate'
          example:
            title: 'Domain-Driven Design: Tackling Complexity in the Heart of Software'
            authorIds:
              - '123e4567-e89b-12d3-a456-426614174001'
            publisherId: '123e4567-e89b-12d3-a456-426614174002'
            isbn: '978-0-321-12521-7'
            publishedOn: '2003-08-01'
            abstract: 'A comprehensive guide to domain-driven design principles and practices for building complex software systems.'
            tags:
              - 'software-engineering'
              - 'architecture'
              - 'ddd'

    CatalogEntryUpdateRequest:
      description: Request body for updating a catalog entry
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CatalogEntryUpdate'
          example:
            title: 'Domain-Driven Design: Tackling Complexity in the Heart of Software (Revised Edition)'
            abstract: 'An updated comprehensive guide to domain-driven design principles and practices.'
            tags:
              - 'software-engineering'
              - 'architecture'
              - 'ddd'
              - 'revised'

    AuthorCreateRequest:
      description: Request body for creating an author
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthorCreate'
          example:
            name: 'Eric Evans'
            biography: 'Eric Evans is a software design consultant and founder of Domain Language, Inc.'

    AuthorUpdateRequest:
      description: Request body for updating an author
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthorUpdate'
          example:
            name: 'Eric J. Evans'
            biography: 'Eric Evans is a thought leader in software design and the author of Domain-Driven Design.'

    PublisherCreateRequest:
      description: Request body for creating a publisher
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PublisherCreate'
          example:
            name: 'Addison-Wesley Professional'
            location: 'Boston, MA, USA'
            website: 'https://www.informit.com/imprint/series_detail.aspx?st=61245'

    PublisherUpdateRequest:
      description: Request body for updating a publisher
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PublisherUpdate'
          example:
            name: 'Addison-Wesley Professional'
            location: 'Boston, Massachusetts, USA'

    TagAddRequest:
      description: Request body for adding a tag to a catalog entry
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TagAdd'
          example:
            tag: 'bestseller'

  securitySchemes:
    openIdConnect:
      type: openIdConnect
      openIdConnectUrl: https://auth.library.com/.well-known/openid-configuration
      description: |
        OpenID Connect authentication. Required scopes:
        - catalog:read - Read access to catalog entries, authors, and publishers
        - catalog:write - Create and update catalog entries, authors, and publishers
        - catalog:admin - Full administrative access including delete operations

  externalDocs:
    description: Find more information about the Catalog Management API and related bounded contexts
    url: https://docs.library.com/api/catalog-management

  x-bounded-context-integrations:
    description: |
      This API is part of the Catalog Management bounded context. It integrates with the following contexts:
      
      - **Catalog Search**: Consumes 'Catalog entry created' and 'Catalog entry updated' events to maintain search indices
      - **Audio Summary**: Consumes 'Catalog entry created' events to generate audio summaries for books
      - **Notification**: Receives notifications when new entries are created that match user preferences
      - **Lending**: References catalog entries for lending operations (read-only)
      - **Bookshelf**: References catalog entries for user bookshelves (read-only)
      - **Purchase**: May trigger catalog entry creation when new books are acquired
      
      Events published by this context:
      - catalog.entry.created (v1)
      - catalog.entry.updated (v1)
      - catalog.entry.deleted (v1)
      
      External APIs:
      - Catalog Search API: https://api.library.com/search/v1
      - Lending API: https://api.library.com/lending/v1
      - Notification API: https://api.library.com/notifications/v1