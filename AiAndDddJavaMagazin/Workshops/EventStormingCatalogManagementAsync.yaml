asyncapi: 3.0.0
info:
  title: Catalog Management
  version: 1.0.0
  description: |
    Events produced by catalog management service.
    The service produces the following domain events:
      - Catalog Entry Created
      - Catalog Entry Updated
    
    This bounded context manages the library catalog containing book metadata,
    authors, publishers, titles, ISBNs, abstracts, and tags. It receives events
    from the Purchase context and produces events consumed by Audio Summary,
    Catalog Search, Lending, Notification, and Bookshelf contexts.
  contact:
    name: Annegret Junker
    url: https://online-library.org/sample
    email: annegret.junker@online-library.org
  externalDocs:
    description: Related contexts in the library system
    url: https://online-library.org/docs/bounded-contexts
  x-api-id: a8f5c2d1-3e7b-4a9c-b2f1-8d4e6c9a1b3f

servers:
  event-broker-library:
    host: broker.online-library.org:8092
    protocol: kafka
    description: Event broker of the online library
    security:
      - $ref: '#/components/securitySchemes/user-password'
    bindings:
      kafka:
        schemaRegistryUrl: 'https://online-library-schema-registry.com'
        schemaRegistryVendor: 'confluent'
        bindingVersion: '0.5.0'

channels:
  CatalogEntryCreatedChannel:
    description: Channel where messages are stored when a catalog entry was created
    address: catalog-entry-created
    messages:
      CatalogEntryCreatedEvent:
        $ref: '#/components/messages/CatalogEntryCreatedSend'
    bindings:
      kafka:
        topic: 'catalog-entry-created-event-channel'
        bindingVersion: '0.5.0'

  CatalogEntryUpdatedChannel:
    description: Channel where messages are stored when a catalog entry was updated
    address: catalog-entry-updated
    messages:
      CatalogEntryUpdatedEvent:
        $ref: '#/components/messages/CatalogEntryUpdatedSend'
    bindings:
      kafka:
        topic: 'catalog-entry-updated-event-channel'
        bindingVersion: '0.5.0'

  BookPurchasedChannel:
    description: |
      Channel for receiving book purchased events from Purchase context.
      External event consumed by Catalog Management to trigger catalog entry creation.
    address: book-purchased
    messages:
      BookPurchasedEvent:
        $ref: '#/components/messages/BookPurchasedReceive'
    bindings:
      kafka:
        topic: 'book-purchased-event-channel'
        bindingVersion: '0.5.0'

operations:
  CatalogEntryCreatedSendOperation:
    action: send
    channel:
      $ref: '#/channels/CatalogEntryCreatedChannel'
    description: |
      Publishes catalog entry created event. Consumed by:
      - Audio Summary (to create index and audio summary)
      - Catalog Search (to index catalog entry)
      - Lending (to enable book lending)
      - Notification (to notify about new catalog entries)
      - Bookshelf (to enable book shelf arrangement)
    bindings:
      kafka:
        bindingVersion: '0.5.0'
        groupId:
          type: string
          pattern: ^cg-catalog-entry-created-.*$

  CatalogEntryUpdatedSendOperation:
    action: send
    channel:
      $ref: '#/channels/CatalogEntryUpdatedChannel'
    description: |
      Publishes catalog entry updated event. Consumed by:
      - Audio Summary (to update index)
      - Catalog Search (to reindex catalog entry)
      - Lending (to update lending information)
      - Notification (to notify about catalog updates)
      - Bookshelf (to update book shelf data)
    bindings:
      kafka:
        bindingVersion: '0.5.0'
        groupId:
          type: string
          pattern: ^cg-catalog-entry-updated-.*$

  BookPurchasedReceiveOperation:
    action: receive
    channel:
      $ref: '#/channels/BookPurchasedChannel'
    description: |
      Receives book purchased events from Purchase context to create catalog entries.
      This operation triggers the catalog entry creation workflow performed by Librarian actor.
    bindings:
      kafka:
        bindingVersion: '0.5.0'
        groupId:
          type: string
          enum:
            - cg-catalog-management-book-purchased

components:
  messages:
    CatalogEntryCreatedSend:
      name: CatalogEntryCreated
      title: Catalog Entry Created Event
      summary: Event published when a new catalog entry is created by a librarian
      headers:
        $ref: '#/components/schemas/MessageHeader'
      payload:
        $ref: '#/components/schemas/CatalogEntry'

    CatalogEntryUpdatedSend:
      name: CatalogEntryUpdated
      title: Catalog Entry Updated Event
      summary: Event published when an existing catalog entry is updated by a librarian
      headers:
        $ref: '#/components/schemas/MessageHeader'
      payload:
        $ref: '#/components/schemas/CatalogEntry'

    BookPurchasedReceive:
      name: BookPurchased
      title: Book Purchased Event
      summary: Event received from Purchase context when a book is purchased
      contentType: application/json
      headers:
        $ref: '#/components/schemas/MessageHeader'
      payload:
        $ref: '#/components/schemas/BookPurchased'

  schemas:
    CatalogEntry:
      description: |
        Catalog entry aggregate containing complete book metadata.
        This is the core domain object managed by the Catalog Management context.
        Maps to "Katalogeintrag" in the domain model.
      type: object
      required:
        - catalogIdentifier
        - isbn
        - title
        - authors
        - publisher
        - createdAt
      properties:
        catalogIdentifier:
          description: Unique identifier of the catalog entry (Schlüssel Identifier)
          type: string
          format: uuid
          examples:
            - f3d8b9c1-4e2a-4b7d-9c1f-8e3a5b6d7c8e
        isbn:
          description: ISBN (international standard book number) with 13 characters
          type: string
          pattern: ^(?:ISBN(?:-13)?:?\ )?(?=[0-9]{13}$|(?=(?:[0-9]+[-\ ]){4})[-\ 0-9]{17}$)97[89][-\ ]?[0-9]{1,5}[-\ ]?[0-9]+[-\ ]?[0-9]+[-\ ]?[0-9]$
          examples:
            - 9780321146530
            - ISBN 978-0321-14653-0
        title:
          description: Title of the book (Titel)
          type: string
          minLength: 2
          maxLength: 255
          examples:
            - Test-Driven Development
            - Domain-Driven Design
        subtitle:
          description: Subtitle of the book
          type: string
          minLength: 2
          maxLength: 255
          examples:
            - By Example
            - Tackling Complexity in the Heart of Software
        authors:
          description: List of authors who wrote the book (Autor - 1..* relationship)
          type: array
          minItems: 1
          maxItems: 10
          items:
            $ref: '#/components/schemas/Author'
        areEditors:
          description: Flag indicating if the book is published by editors rather than individual authors
          type: boolean
          default: false
          examples:
            - true
            - false
        publisher:
          description: Publisher of the book (Verlag)
          $ref: '#/components/schemas/Publisher'
        publishedOn:
          description: Publication date (Veröffentlicht am)
          type: string
          format: date
          examples:
            - 2003-11-08
            - 2004-08-30
        abstract:
          description: Abstract or summary of the book content (Kurzfassung - 0..1 relationship)
          type: string
          minLength: 10
          maxLength: 2000
          examples:
            - This book follows two TDD projects from start to finish, illustrating techniques programmers can use to increase the quality of their work.
        tags:
          description: Keywords or tags for categorization (Stichwort - 0..* relationship)
          type: array
          minItems: 0
          maxItems: 20
          items:
            type: string
            minLength: 2
            maxLength: 50
          examples:
            - software-engineering
            - testing
            - agile
            - design-patterns
        createdAt:
          description: Timestamp when the catalog entry was created (Erzeugt um)
          type: string
          format: date-time
          examples:
            - 2025-10-02T10:30:00Z
        updatedAt:
          description: Timestamp when the catalog entry was last updated (Geändert um)
          type: string
          format: date-time
          examples:
            - 2025-10-02T14:45:00Z

    Author:
      description: |
        Author entity representing a book author (Autor).
        Authors write books (schreibt relationship 1..* in domain model).
      type: object
      required:
        - authorId
        - givenName
        - familyName
      properties:
        authorId:
          description: Identifier of the author
          type: string
          format: uuid
          examples:
            - 08a13654-05f3-4664-8c8d-fdd9114ec3be
            - a7b9c2d3-1e4f-5a6b-8c9d-0e1f2a3b4c5d
        givenName:
          description: Given name of the author
          type: string
          minLength: 2
          maxLength: 55
          examples:
            - Kent
            - Eric
            - Martin
        familyName:
          description: Family name of the author
          type: string
          minLength: 2
          maxLength: 55
          examples:
            - Beck
            - Evans
            - Fowler

    Publisher:
      description: |
        Publisher entity representing a book publisher (Verlag).
        Each catalog entry has exactly one publisher (1 relationship in domain model).
      type: object
      required:
        - name
      properties:
        name:
          description: Name of the publisher
          type: string
          minLength: 2
          maxLength: 100
          examples:
            - Addison-Wesley Professional
            - Springer Nature
            - O'Reilly Media
        city:
          description: Location of the publisher headquarters
          type: string
          minLength: 2
          maxLength: 55
          examples:
            - Boston
            - Cham, Switzerland
            - Sebastopol, California

    BookPurchased:
      description: |
        External event payload received from Purchase context.
        This event triggers catalog entry creation workflow.
        Reference: Purchase bounded context API
      type: object
      required:
        - bookIdentifier
        - isbn13
      properties:
        bookIdentifier:
          description: Identifier of purchased book from Purchase context
          type: string
          format: uuid
          examples:
            - 5dda405a-d28e-490a-8508-1ea3453e91ae
        isbn13:
          description: ISBN (international standard book number) with 13 characters
          type: string
          pattern: ^(?:ISBN(?:-13)?:?\ )?(?=[0-9]{13}$|(?=(?:[0-9]+[-\ ]){4})[-\ 0-9]{17}$)97[89][-\ ]?[0-9]{1,5}[-\ ]?[0-9]+[-\ ]?[0-9]+[-\ ]?[0-9]$
          examples:
            - 9780321146530
            - ISBN 978-0321-14653-0
        authors:
          description: Authors of the purchased book
          type: array
          minItems: 1
          maxItems: 10
          items:
            type: object
            properties:
              authorId:
                type: string
                format: uuid
              givenName:
                type: string
              familyName:
                type: string
        areEditors:
          description: Flag to set to true if the book is published by editors
          type: boolean
          default: false
        editor:
          description: Editor information from purchase context
          type: object
          properties:
            name:
              type: string
            city:
              type: string
        title:
          description: Title of the purchased book
          type: string
          examples:
            - Test-Driven Development
        subtitle:
          description: Subtitle of the purchased book
          type: string
          examples:
            - By Example
        media:
          description: Link to the media which contains the book
          type: string
          format: url
          examples:
            - 'https://online-library/storage/2024/test-driven-development.epub'
        format:
          description: Format of the according media
          type: string
          x-extensible-enum:
            - EPUB
            - KINDLE
            - PDF
            - BBEB
            - MOBI
          default: EPUB
          examples:
            - EPUB

    MessageHeader:
      description: Header information for each message
      type: object
      required:
        - correlationId
        - messageId
        - x-api-identifier
        - x-api-version
      properties:
        correlationId:
          description: Identifier to be set by application to trace end-to-end-api-journey
          type: string
          format: uuid
          examples:
            - b3416449-5f69-4cd2-a6c4-1ff82da96bce
        messageId:
          description: Identifier for the particular message, is needed in case of cascading infrastructure
          type: string
          format: uuid
          examples:
            - 5a1d305b-19f3-46eb-ada1-9a9770e56fd1
        x-api-identifier:
          description: Identifier of the API used to create the message
          type: string
          format: uuid
          default: a8f5c2d1-3e7b-4a9c-b2f1-8d4e6c9a1b3f
          examples:
            - a8f5c2d1-3e7b-4a9c-b2f1-8d4e6c9a1b3f
        x-api-version:
          description: Version of the API
          type: string
          x-extensible-enum:
            - 1.0.0
          default: 1.0.0
          examples:
            - 1.0.0
        source:
          description: Application name creating the message
          type: string
          minLength: 2
          maxLength: 20
          examples:
            - CatalogManagement
            - Purchase

  securitySchemes:
    user-password:
      type: userPassword
      description: Security scheme for events