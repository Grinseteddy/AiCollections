asyncapi: 3.0.0
info:
  title: Catalog Management
  version: 1.0.0
  description: |
    Events produced by the Catalog Management service.
    The service manages the library catalog and produces the following domain events:
      - Catalog Entry Created
      - Catalog Entry Updated
    
    This bounded context is responsible for maintaining the library's catalog of books,
    including bibliographic information, author details, publisher information, and ISBN management.
    It receives book purchase events from the Purchase context and publishes catalog updates
    to downstream contexts (Audio Summary, Lending, Catalog Search, Notification).
  contact:
    name: Annegret Junker
    url: https://online-library.org/sample
    email: annegret.junker@online-library.org
  x-api-id: a8f23c7d-4e91-4b2a-9c3f-8d5e1f9a2b4c
  externalDocs:
    description: Integration with Purchase context for book purchased events
    url: https://online-library.org/api/purchase

servers:
  event-broker-library:
    host: broker.online-library.org:8092
    protocol: kafka
    description: Event broker of the online library
    security:
      - $ref: '#/components/securitySchemes/user-password'
    bindings:
      kafka:
        schemaRegistryUrl: 'https://online-library-schema-registry.com'
        schemaRegistryVendor: 'confluent'
        bindingVersion: '0.5.0'

channels:
  CatalogEntryCreatedChannel:
    description: Channel where messages are stored when a catalog entry is created
    address: catalog-entry-created
    messages:
      CatalogEntryCreatedEvent:
        $ref: '#/components/messages/CatalogEntryCreatedSend'
    bindings:
      kafka:
        topic: 'catalog-entry-created-event-channel'
        bindingVersion: '0.5.0'

  CatalogEntryUpdatedChannel:
    description: Channel where messages are stored when a catalog entry is updated
    address: catalog-entry-updated
    messages:
      CatalogEntryUpdatedEvent:
        $ref: '#/components/messages/CatalogEntryUpdatedSend'
    bindings:
      kafka:
        topic: 'catalog-entry-updated-event-channel'
        bindingVersion: '0.5.0'

  BookPurchasedChannel:
    description: |
      Channel for receiving book purchased events from the Purchase context.
      External event consumed by Catalog Management to create new catalog entries.
    address: book-purchased
    messages:
      BookPurchasedEvent:
        $ref: '#/components/messages/BookPurchasedReceive'
    bindings:
      kafka:
        topic: 'book-purchased-event-channel'
        bindingVersion: '0.5.0'
    externalDocs:
      description: Book Purchased event is owned by the Purchase context
      url: https://online-library.org/api/purchase#BookPurchased

operations:
  CatalogEntryCreatedSendOperation:
    action: send
    channel:
      $ref: '#/channels/CatalogEntryCreatedChannel'
    summary: Send catalog entry created event
    description: |
      Published when a new catalog entry is created by a librarian.
      Consumed by: Audio Summary, Lending, Catalog Search, Notification contexts.
    bindings:
      kafka:
        bindingVersion: '0.5.0'
        groupId:
          type: string
          pattern: ^cg-catalog-entry-created-.*$

  CatalogEntryUpdatedSendOperation:
    action: send
    channel:
      $ref: '#/channels/CatalogEntryUpdatedChannel'
    summary: Send catalog entry updated event
    description: |
      Published when an existing catalog entry is modified by a librarian.
      Consumed by: Audio Summary, Lending, Catalog Search, Notification contexts.
    bindings:
      kafka:
        bindingVersion: '0.5.0'
        groupId:
          type: string
          pattern: ^cg-catalog-entry-updated-.*$

  BookPurchasedReceiveOperation:
    action: receive
    channel:
      $ref: '#/channels/BookPurchasedChannel'
    summary: Receive book purchased event
    description: |
      Consumed from the Purchase context to trigger catalog entry creation.
      After receiving this event, the Catalog Management service creates a new catalog entry.
    bindings:
      kafka:
        bindingVersion: '0.5.0'
        groupId:
          type: string
          enum:
            - cg-catalog-management-book-purchased

components:
  messages:
    CatalogEntryCreatedSend:
      name: CatalogEntryCreated
      title: Catalog Entry Created Event
      summary: Event published when a new catalog entry is created
      headers:
        $ref: '#/components/schemas/MessageHeader'
      payload:
        $ref: '#/components/schemas/CatalogEntry'

    CatalogEntryUpdatedSend:
      name: CatalogEntryUpdated
      title: Catalog Entry Updated Event
      summary: Event published when a catalog entry is modified
      headers:
        $ref: '#/components/schemas/MessageHeader'
      payload:
        $ref: '#/components/schemas/CatalogEntry'

    BookPurchasedReceive:
      name: BookPurchased
      title: Book Purchased Event
      summary: External event received from Purchase context
      description: |
        This event is owned by the Purchase bounded context.
        Catalog Management subscribes to this event to create new catalog entries.
      headers:
        $ref: '#/components/schemas/MessageHeader'
      payload:
        $ref: '#/components/schemas/BookPurchased'

  schemas:
    CatalogEntry:
      description: |
        Aggregate root representing a catalog entry (Katalogeintrag) in the library system.
        Contains complete bibliographic information including authors, title, publisher, ISBN, and metadata.
      type: object
      required:
        - identifier
        - isbn
        - title
        - authors
        - createdAt
      properties:
        identifier:
          description: Unique identifier of the catalog entry (Schlüssel Identifier)
          type: string
          format: uuid
          examples:
            - 7c9e6b2f-4a1d-4e8b-9f3c-2d5e8a7b1c4f
        isbn:
          $ref: '#/components/schemas/ISBN'
        title:
          $ref: '#/components/schemas/Title'
        authors:
          description: Authors who wrote the book (Autor - 1..*)
          type: array
          minItems: 1
          maxItems: 20
          items:
            $ref: '#/components/schemas/Author'
        publisher:
          $ref: '#/components/schemas/Publisher'
        publishedOn:
          description: Publication date of the book (Veröffentlicht am)
          type: string
          format: date
          examples:
            - '2023-05-15'
        abstract:
          description: Short summary or abstract of the book content (Kurzfassung - 0..1)
          type: string
          minLength: 10
          maxLength: 2000
          examples:
            - This book provides a comprehensive introduction to test-driven development practices.
        tags:
          description: Keywords or tags for categorization (Stichwort - 0..*)
          type: array
          maxItems: 50
          items:
            $ref: '#/components/schemas/Tag'
        createdAt:
          description: Timestamp when the catalog entry was created (Erzeugt um)
          type: string
          format: date-time
          examples:
            - '2024-09-15T14:30:00Z'
        updatedAt:
          description: Timestamp when the catalog entry was last updated (Geändert um)
          type: string
          format: date-time
          examples:
            - '2024-10-01T09:15:00Z'

    Author:
      description: Author entity (Autor) who wrote the book
      type: object
      required:
        - authorId
        - givenName
        - familyName
      properties:
        authorId:
          description: Unique identifier of the author
          type: string
          format: uuid
          examples:
            - 3f8a9c2d-1e4b-4a7c-9d2e-5b6c8a9d1f3e
        givenName:
          description: Given name (first name) of the author
          type: string
          minLength: 2
          maxLength: 55
          examples:
            - Kent
            - Martin
        familyName:
          description: Family name (last name) of the author
          type: string
          minLength: 2
          maxLength: 55
          examples:
            - Beck
            - Fowler

    Title:
      description: Title value object representing the book's title (Titel)
      type: object
      required:
        - mainTitle
      properties:
        mainTitle:
          description: Main title of the book
          type: string
          minLength: 1
          maxLength: 255
          examples:
            - Test-Driven Development
            - Domain-Driven Design
        subtitle:
          description: Subtitle providing additional context
          type: string
          minLength: 1
          maxLength: 255
          examples:
            - By Example
            - Tackling Complexity in the Heart of Software

    Publisher:
      description: Publisher entity (Verlag) responsible for publishing the book
      type: object
      required:
        - name
      properties:
        publisherId:
          description: Unique identifier of the publisher
          type: string
          format: uuid
          examples:
            - 6d4e9f2a-3c1b-4e7d-8a9f-2c5b7d9e1a3f
        name:
          description: Name of the publishing company
          type: string
          minLength: 2
          maxLength: 100
          examples:
            - Addison-Wesley
            - Springer Nature
            - O'Reilly Media
        city:
          description: City where the publisher is located
          type: string
          minLength: 2
          maxLength: 100
          examples:
            - Boston
            - Cham, Switzerland
            - New York

    ISBN:
      description: |
        ISBN value object (ISBN) - International Standard Book Number.
        Uniquely identifies the book in the global publishing system.
      type: object
      required:
        - isbn13
      properties:
        isbn13:
          description: ISBN-13 format (13 digits)
          type: string
          pattern: ^(?:ISBN(?:-13)?:?\ )?(?=[0-9]{13}$|(?=(?:[0-9]+[-\ ]){4})[-\ 0-9]{17}$)97[89][-\ ]?[0-9]{1,5}[-\ ]?[0-9]+[-\ ]?[0-9]+[-\ ]?[0-9]$
          examples:
            - '9780321146530'
            - 'ISBN 978-0-321-14653-0'
            - '9780134757599'

    Tag:
      description: Tag value object (Stichwort) for categorization and search
      type: object
      required:
        - label
      properties:
        label:
          description: The tag label or keyword
          type: string
          minLength: 2
          maxLength: 50
          examples:
            - software-engineering
            - testing
            - agile
            - architecture

    BookPurchased:
      description: |
        External event payload from Purchase context.
        Represents a book that was purchased and needs to be cataloged.
      type: object
      required:
        - bookIdentifier
        - isbn13
      properties:
        bookIdentifier:
          description: Identifier of the purchased book
          type: string
          format: uuid
          examples:
            - 5dda405a-d28e-490a-8508-1ea3453e91ae
        isbn13:
          description: ISBN (international standard book number) with 13 characters
          type: string
          pattern: ^(?:ISBN(?:-13)?:?\ )?(?=[0-9]{13}$|(?=(?:[0-9]+[-\ ]){4})[-\ 0-9]{17}$)97[89][-\ ]?[0-9]{1,5}[-\ ]?[0-9]+[-\ ]?[0-9]+[-\ ]?[0-9]$
          examples:
            - '9780321146530'
        authors:
          description: Authors of the purchased book
          type: array
          minItems: 1
          maxItems: 10
          items:
            type: object
            required:
              - authorId
              - givenName
              - familyName
            properties:
              authorId:
                type: string
                format: uuid
              givenName:
                type: string
              familyName:
                type: string
        title:
          description: Title of the purchased book
          type: string
          minLength: 2
          maxLength: 255
          examples:
            - Test-Driven Development
        subtitle:
          description: Subtitle of the purchased book
          type: string
          minLength: 2
          maxLength: 255
          examples:
            - By Example
        editor:
          description: Editor/Publisher information
          type: object
          properties:
            name:
              type: string
            city:
              type: string

    MessageHeader:
      description: Standard header information for each message
      type: object
      required:
        - correlationId
        - messageId
        - x-api-identifier
        - x-api-version
      properties:
        correlationId:
          description: Identifier to trace end-to-end API journey across contexts
          type: string
          format: uuid
          examples:
            - b3416449-5f69-4cd2-a6c4-1ff82da96bce
        messageId:
          description: Unique identifier for this particular message instance
          type: string
          format: uuid
          examples:
            - 5a1d305b-19f3-46eb-ada1-9a9770e56fd1
        x-api-identifier:
          description: Identifier of the Catalog Management API
          type: string
          format: uuid
          default: a8f23c7d-4e91-4b2a-9c3f-8d5e1f9a2b4c
          examples:
            - a8f23c7d-4e91-4b2a-9c3f-8d5e1f9a2b4c
        x-api-version:
          description: Version of the API
          type: string
          x-extensible-enum:
            - 1.0.0
          default: 1.0.0
          examples:
            - 1.0.0
        source:
          description: Application name creating the message
          type: string
          minLength: 2
          maxLength: 30
          examples:
            - CatalogManagement
            - Purchase
        timestamp:
          description: Timestamp when the message was created
          type: string
          format: date-time
          examples:
            - '2024-10-02T10:30:00Z'

  securitySchemes:
    user-password:
      type: userPassword
      description: Security scheme for event broker authentication