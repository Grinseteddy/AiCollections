openapi: 3.1.0
info:
  title: Catalog Management API
  description: Catalog Management allows librarians to manage catalog entries and allows
  version: 2025-1
  contact:
    name: Annegret Junker
    email: annegret.junker@gmx.de # Assuming same contact email as Task Management example
  x-api-id: f5a3b2c1-d4e5-4f67-890a-1b2c3d4e5f67 # Placeholder UUID
  x-audience: external-public

servers:
  - url: 'https://apis.online-library.org/catalog-management'

security:
  - openIdConnect:
      - catalog:manage # Assumed scope for management operations

tags:
  - name: Catalog Entries
    description: Operations for managing individual catalog entries.

paths:
  /catalog-entries:
    get:
      description: Retrieves a list of catalog entries.
      operationId: getCatalogEntries
      tags:
        - Catalog Entries
      security:
        - openIdConnect:
            - catalog:manage
      parameters:
        - $ref: '#/components/parameters/VersionParameter'
      responses:
        '200':
          description: A list of catalog entries.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CatalogEntry'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '500':
          $ref: '#/components/responses/ServiceNotAvailableResponse'

    post:
      description: Creates a new catalog entry.
      operationId: createCatalogEntry
      tags:
        - Catalog Entries
      security:
        - openIdConnect:
            - catalog:manage
      requestBody:
        $ref: '#/components/requestBodies/CatalogEntryCreateRequest'
      responses:
        '201':
          description: Catalog entry created successfully.
          headers:
            Location:
              description: Link to the newly created catalog entry.
              schema:
                type: string
                format: uri
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogEntry'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '500':
          $ref: '#/components/responses/ServiceNotAvailableResponse'

  /catalog-entries/{catalogEntryId}:
    get:
      description: Retrieves a single catalog entry by its ID.
      operationId: getCatalogEntryById
      tags:
        - Catalog Entries
      security:
        - openIdConnect:
            - catalog:manage
      parameters:
        - $ref: '#/components/parameters/CatalogEntryIdParameter'
        - $ref: '#/components/parameters/VersionParameter'
      responses:
        '200':
          description: Single catalog entry response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogEntry'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '500':
          $ref: '#/components/responses/ServiceNotAvailableResponse'

    put:
      description: Fully updates an existing catalog entry identified by its ID.
      operationId: updateCatalogEntry
      tags:
        - Catalog Entries
      security:
        - openIdConnect:
            - catalog:manage
      parameters:
        - $ref: '#/components/parameters/CatalogEntryIdParameter'
        - $ref: '#/components/parameters/VersionParameter'
      requestBody:
        $ref: '#/components/requestBodies/CatalogEntryCreateRequest' # Reusing Create schema for full PUT update
      responses:
        '200':
          description: Catalog entry updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogEntry'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '500':
          $ref: '#/components/responses/ServiceNotAvailableResponse'

    delete:
      description: Deletes a catalog entry by its ID.
      operationId: deleteCatalogEntry
      tags:
        - Catalog Entries
      security:
        - openIdConnect:
            - catalog:manage
      parameters:
        - $ref: '#/components/parameters/CatalogEntryIdParameter'
        - $ref: '#/components/parameters/VersionParameter'
      responses:
        '204':
          description: Catalog entry deleted successfully (No Content).
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '500':
          $ref: '#/components/responses/ServiceNotAvailableResponse'

  /catalog-entries/{catalogEntryId}/abstracts:
    put:
      description: Updates the abstract of a catalog entry.
      operationId: updateCatalogEntryAbstract
      tags:
        - Catalog Entries
      security:
        - openIdConnect:
            - catalog:manage
      parameters:
        - $ref: '#/components/parameters/CatalogEntryIdParameter'
        - $ref: '#/components/parameters/VersionParameter'
      requestBody:
        $ref: '#/components/requestBodies/AbstractUpdateRequest'
      responses:
        '200':
          description: Abstract updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Abstract'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '500':
          $ref: '#/components/responses/ServiceNotAvailableResponse'

  /catalog-entries/{catalogEntryId}/tags:
    put:
      description: Replaces all existing tags with a new list of tags for a catalog entry.
      operationId: updateCatalogEntryTags
      tags:
        - Catalog Entries
      security:
        - openIdConnect:
            - catalog:manage
      parameters:
        - $ref: '#/components/parameters/CatalogEntryIdParameter'
        - $ref: '#/components/parameters/VersionParameter'
      requestBody:
        $ref: '#/components/requestBodies/TagsUpdateRequest'
      responses:
        '200':
          description: Tags updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tags'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '500':
          $ref: '#/components/responses/ServiceNotAvailableResponse'

components:
  parameters:
    CatalogEntryIdParameter:
      name: catalogEntryId
      in: path
      description: The unique identifier of a catalog entry.
      required: true
      schema:
        type: string
        format: uuid

    VersionParameter:
      name: x-version
      in: header
      description: API version to use for the request.
      required: true
      schema:
        type: string
        default: "2025-1"
        enum: ["2025-1"]

  schemas:
    CatalogEntry:
      type: object
      required:
        - id
        - authors
        - title
        - publisher
        - isbn
        - publishedOn
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
          description: The unique identifier for the catalog entry.
        authors:
          type: array
          description: The author(s) of the book (1..* in visual glossary).
          items:
            type: string
        title:
          type: string
          description: The title of the book (1 in visual glossary).
        publisher:
          type: string
          description: The publisher of the book (1 in visual glossary).
        isbn:
          type: string
          description: The International Standard Book Number (1 in visual glossary).
        publishedOn:
          type: string
          format: date
          description: The date the book was published (1 in visual glossary).
        abstract:
          $ref: '#/components/schemas/Abstract'
        tags:
          $ref: '#/components/schemas/Tags'
        createdAt:
          type: string
          format: date-time
          description: The timestamp when the entry was created.
        updatedAt:
          type: string
          format: date-time
          description: The timestamp when the entry was last updated.

    CatalogEntryCreate:
      type: object
      required:
        - authors
        - title
        - publisher
        - isbn
        - publishedOn
      properties:
        authors:
          type: array
          description: The author(s) of the book.
          items:
            type: string
        title:
          type: string
          description: The title of the book.
        publisher:
          type: string
          description: The publisher of the book.
        isbn:
          type: string
          description: The International Standard Book Number.
        publishedOn:
          type: string
          format: date
          description: The date the book was published.
        abstract:
          $ref: '#/components/schemas/Abstract'
        tags:
          $ref: '#/components/schemas/Tags'

    Abstract:
      type: object
      required:
        - abstract
      properties:
        abstract:
          type: string
          description: A short summary of the catalog entry (Kurzfassung).

    Tags:
      type: object
      required:
        - tags
      properties:
        tags:
          type: array
          description: A list of keywords associated with the catalog entry (Stichwort).
          items:
            type: string

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
        message:
          type: string
        details:
          type: object

  responses:
    BadRequestResponse:
      description: Invalid request due to malformed syntax or bad parameters.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    UnauthorizedResponse:
      description: Authentication failed.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    ForbiddenResponse:
      description: Access forbidden, insufficient permissions.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    NotFoundResponse:
      description: Resource not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    ServiceNotAvailableResponse:
      description: Service unavailable due to a server error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  requestBodies:
    CatalogEntryCreateRequest:
      description: Data for creating a new catalog entry.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CatalogEntryCreate'

    AbstractUpdateRequest:
      description: Request to update only the abstract of a catalog entry.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Abstract'

    TagsUpdateRequest:
      description: Request to update the tags of a catalog entry.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Tags'

  securitySchemes:
    openIdConnect:
      description: Access to Catalog Management via OpenIDConnect
      type: openIdConnect
      openIdConnectUrl: https://auth.online-library.org/.well-known/openid-configuration # Placeholder URL
  
