asyncapi: 3.0.0
info:
  title: Bicycle Distribution Service
  version: 1.0.0
  description: |
    Events produced by the Bicycle Distribution service.
    The service produces the following domain events:
      - Bicycle Distributed
      - Bicycle Returned
      - Bicycle Booked
      - Bicycle Picked Up
      - Bicycle Unlocked
  contact:
    name: Bicycle Distribution Team
    url: https://bicycle-rental.org/distribution
    email: distribution@bicycle-rental.org
  x-api-id: 8a2f3c5d-7e9a-4b1c-9d2e-5f6a7b8c9d0e
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  tags:
    - name: Bicycle Distribution
      description: All events produced by Bicycle Distribution bounded context
    - name: Rental Operations
      description: Events related to bicycle rental operations

servers:
  event-broker-bicycle:
    host: broker.bicycle-rental.org:8092
    protocol: kafka
    description: Event broker for bicycle rental system
    security:
      - $ref: '#/components/securitySchemes/user-password'
    bindings:
      kafka:
        schemaRegistryUrl: 'https://bicycle-rental-schema-registry.com'
        schemaRegistryVendor: 'confluent'
        bindingVersion: '0.5.0'

channels:
  BicycleDistributedChannel:
    description: Channel for bicycle distribution events
    address: bicycle-distributed
    messages:
      BicycleDistributedEvent:
        $ref: '#/components/messages/BicycleDistributedSend'
    bindings:
      kafka:
        topic: 'bicycle-distributed-event-channel'
        bindingVersion: '0.5.0'

  BicycleReturnedChannel:
    description: Channel for bicycle return events
    address: bicycle-returned
    messages:
      BicycleReturnedEvent:
        $ref: '#/components/messages/BicycleReturnedSend'
    bindings:
      kafka:
        topic: 'bicycle-returned-event-channel'
        bindingVersion: '0.5.0'

  BicycleBookedChannel:
    description: Channel for bicycle booking events
    address: bicycle-booked
    messages:
      BicycleBookedEvent:
        $ref: '#/components/messages/BicycleBookedSend'
    bindings:
      kafka:
        topic: 'bicycle-booked-event-channel'
        bindingVersion: '0.5.0'

  BicyclePickedUpChannel:
    description: Channel for bicycle pickup events
    address: bicycle-picked-up
    messages:
      BicyclePickedUpEvent:
        $ref: '#/components/messages/BicyclePickedUpSend'
    bindings:
      kafka:
        topic: 'bicycle-picked-up-event-channel'
        bindingVersion: '0.5.0'

  BicycleUnlockedChannel:
    description: Channel for bicycle unlock events
    address: bicycle-unlocked
    messages:
      BicycleUnlockedEvent:
        $ref: '#/components/messages/BicycleUnlockedSend'
    bindings:
      kafka:
        topic: 'bicycle-unlocked-event-channel'
        bindingVersion: '0.5.0'

operations:
  BicycleDistributedSendOperation:
    description: Event sent when a bicycle is distributed to a location
    action: "send"
    channel:
      $ref: "#/channels/BicycleDistributedChannel"
    bindings:
      kafka:
        bindingVersion: '0.5.0'
        groupId:
          type: string
          pattern: ^cg-bicycle-distributed-.*$

  BicycleReturnedSendOperation:
    description: Event sent when a bicycle is returned by a customer
    action: "send"
    channel:
      $ref: "#/channels/BicycleReturnedChannel"
    bindings:
      kafka:
        bindingVersion: '0.5.0'
        groupId:
          type: string
          pattern: ^cg-bicycle-returned-.*$

  BicycleBookedSendOperation:
    description: Event sent when a bicycle is booked by a customer
    action: "send"
    channel:
      $ref: "#/channels/BicycleBookedChannel"
    bindings:
      kafka:
        bindingVersion: '0.5.0'
        groupId:
          type: string
          pattern: ^cg-bicycle-booked-.*$

  BicyclePickedUpSendOperation:
    description: Event sent when a customer picks up a booked bicycle
    action: "send"
    channel:
      $ref: "#/channels/BicyclePickedUpChannel"
    bindings:
      kafka:
        bindingVersion: '0.5.0'
        groupId:
          type: string
          pattern: ^cg-bicycle-picked-up-.*$

  BicycleUnlockedSendOperation:
    description: Event sent when a bicycle lock is unlocked
    action: "send"
    channel:
      $ref: "#/channels/BicycleUnlockedChannel"
    bindings:
      kafka:
        bindingVersion: '0.5.0'
        groupId:
          type: string
          pattern: ^cg-bicycle-unlocked-.*$

components:
  messages:
    BicycleDistributedSend:
      headers:
        $ref: '#/components/schemas/MessageHeader'
      payload:
        $ref: '#/components/schemas/BicycleDistribution'

    BicycleReturnedSend:
      headers:
        $ref: '#/components/schemas/MessageHeader'
      payload:
        $ref: '#/components/schemas/BicycleReturn'

    BicycleBookedSend:
      headers:
        $ref: '#/components/schemas/MessageHeader'
      payload:
        $ref: '#/components/schemas/BicycleBooking'

    BicyclePickedUpSend:
      headers:
        $ref: '#/components/schemas/MessageHeader'
      payload:
        $ref: '#/components/schemas/BicyclePickup'

    BicycleUnlockedSend:
      headers:
        $ref: '#/components/schemas/MessageHeader'
      payload:
        $ref: '#/components/schemas/BicycleUnlock'

  schemas:
    Bicycle:
      description: A bicycle available for rental
      type: object
      required:
        - bicycleId
        - status
        - type
      properties:
        bicycleId:
          description: Unique identifier of the bicycle
          type: string
          format: uuid
          examples:
            - 7f3e4d5c-6b2a-4c8d-9e1f-0a2b3c4d5e6f
        serialNumber:
          description: Manufacturer serial number
          type: string
          minLength: 5
          maxLength: 50
          examples:
            - BK-2024-12345
        type:
          description: Type of bicycle
          type: string
          enum:
            - CITY_BIKE
            - MOUNTAIN_BIKE
            - ELECTRIC_BIKE
            - CARGO_BIKE
          examples:
            - CITY_BIKE
        status:
          description: Current status of the bicycle
          type: string
          enum:
            - AVAILABLE
            - BOOKED
            - IN_USE
            - MAINTENANCE
            - DISTRIBUTED
            - RETURNED
          examples:
            - AVAILABLE
        currentLocation:
          $ref: '#/components/schemas/Location'
        lockId:
          description: Identifier of the lock attached to this bicycle
          type: string
          format: uuid
          examples:
            - 9d2e5f6a-7b8c-4d0e-1a2b-3c4d5e6f7a8b

    Location:
      description: Location where bicycle is stored
      type: object
      required:
        - locationType
        - locationId
      properties:
        locationType:
          description: Type of storage location
          type: string
          enum:
            - RACK
            - HOTEL
            - STATION
          examples:
            - RACK
        locationId:
          description: Identifier of the location
          type: string
          format: uuid
          examples:
            - 1a2b3c4d-5e6f-7a8b-9c0d-1e2f3a4b5c6d
        locationName:
          description: Human-readable name of the location
          type: string
          minLength: 2
          maxLength: 100
          examples:
            - Central Station Rack A
            - Grand Hotel Bicycle Storage
        address:
          $ref: '#/components/schemas/Address'
        stationInfo:
          $ref: '#/components/schemas/StationInfo'

    Address:
      description: Physical address of a location
      type: object
      properties:
        street:
          type: string
          minLength: 2
          maxLength: 100
          examples:
            - Main Street 123
        city:
          type: string
          minLength: 2
          maxLength: 50
          examples:
            - Berlin
        postalCode:
          type: string
          pattern: '^[0-9]{5}$'
          examples:
            - '10115'
        country:
          type: string
          minLength: 2
          maxLength: 50
          examples:
            - Germany

    StationInfo:
      description: Information about public transport station
      type: object
      properties:
        stationName:
          type: string
          minLength: 2
          maxLength: 100
          examples:
            - Berlin Hauptbahnhof
        stationType:
          type: string
          enum:
            - TRAIN_STATION
            - BUS_STATION
            - METRO_STATION
            - TRAM_STATION
          examples:
            - TRAIN_STATION

    Rack:
      description: Physical rack for storing bicycles
      type: object
      required:
        - rackId
        - capacity
      properties:
        rackId:
          description: Unique identifier of the rack
          type: string
          format: uuid
          examples:
            - 2b3c4d5e-6f7a-8b9c-0d1e-2f3a4b5c6d7e
        capacity:
          description: Maximum number of bicycles the rack can hold
          type: integer
          minimum: 1
          maximum: 100
          examples:
            - 20
        currentOccupancy:
          description: Current number of bicycles in the rack
          type: integer
          minimum: 0
          examples:
            - 12
        locks:
          description: Locks available in this rack
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/Lock'

    Lock:
      description: Electronic lock for securing bicycles
      type: object
      required:
        - lockId
        - status
      properties:
        lockId:
          description: Unique identifier of the lock
          type: string
          format: uuid
          examples:
            - 3c4d5e6f-7a8b-9c0d-1e2f-3a4b5c6d7e8f
        status:
          description: Current status of the lock
          type: string
          enum:
            - LOCKED
            - UNLOCKED
            - MALFUNCTION
          examples:
            - LOCKED
        batteryLevel:
          description: Battery level percentage
          type: integer
          minimum: 0
          maximum: 100
          examples:
            - 85

    Customer:
      description: Customer renting a bicycle
      type: object
      required:
        - customerId
        - customerType
      properties:
        customerId:
          description: Unique identifier of the customer
          type: string
          format: uuid
          examples:
            - 4d5e6f7a-8b9c-0d1e-2f3a-4b5c6d7e8f9a
        customerType:
          description: Type of customer
          type: string
          enum:
            - TOURIST
            - COMMUTER
          examples:
            - TOURIST
        firstName:
          description: First name of the customer
          type: string
          minLength: 2
          maxLength: 50
          examples:
            - Anna
        lastName:
          description: Last name of the customer
          type: string
          minLength: 2
          maxLength: 50
          examples:
            - Schmidt
        email:
          description: Email address of the customer
          type: string
          format: email
          examples:
            - anna.schmidt@example.com
        membershipId:
          description: Membership ID for commuters
          type: string
          examples:
            - MEM-2024-5678

    BicycleDistribution:
      description: Event payload when a bicycle is distributed to a location
      type: object
      required:
        - distributionId
        - bicycle
        - targetLocation
        - distributedAt
      properties:
        distributionId:
          description: Unique identifier for this distribution event
          type: string
          format: uuid
          examples:
            - 5e6f7a8b-9c0d-1e2f-3a4b-5c6d7e8f9a0b
        bicycle:
          $ref: '#/components/schemas/Bicycle'
        sourceLocation:
          $ref: '#/components/schemas/Location'
        targetLocation:
          $ref: '#/components/schemas/Location'
        distributedAt:
          description: Timestamp when distribution occurred
          type: string
          format: date-time
          examples:
            - '2024-10-13T14:30:00Z'
        distributedBy:
          description: Staff member who performed the distribution
          type: string
          minLength: 2
          maxLength: 100
          examples:
            - John Doe

    BicycleReturn:
      description: Event payload when a bicycle is returned
      type: object
      required:
        - returnId
        - bicycle
        - returnLocation
        - returnedAt
      properties:
        returnId:
          description: Unique identifier for this return event
          type: string
          format: uuid
          examples:
            - 6f7a8b9c-0d1e-2f3a-4b5c-6d7e8f9a0b1c
        bicycle:
          $ref: '#/components/schemas/Bicycle'
        customer:
          $ref: '#/components/schemas/Customer'
        returnLocation:
          $ref: '#/components/schemas/Location'
        returnedAt:
          description: Timestamp when bicycle was returned
          type: string
          format: date-time
          examples:
            - '2024-10-13T16:45:00Z'
        condition:
          description: Condition of bicycle upon return
          type: string
          enum:
            - GOOD
            - MINOR_DAMAGE
            - MAJOR_DAMAGE
            - REQUIRES_MAINTENANCE
          examples:
            - GOOD
        notes:
          description: Additional notes about the return
          type: string
          maxLength: 500

    BicycleBooking:
      description: Event payload when a bicycle is booked
      type: object
      required:
        - bookingId
        - bicycle
        - customer
        - bookedAt
      properties:
        bookingId:
          description: Unique identifier for this booking
          type: string
          format: uuid
          examples:
            - 7a8b9c0d-1e2f-3a4b-5c6d-7e8f9a0b1c2d
        bicycle:
          $ref: '#/components/schemas/Bicycle'
        customer:
          $ref: '#/components/schemas/Customer'
        pickupLocation:
          $ref: '#/components/schemas/Location'
        bookedAt:
          description: Timestamp when booking was made
          type: string
          format: date-time
          examples:
            - '2024-10-13T12:00:00Z'
        plannedPickupTime:
          description: Planned pickup time
          type: string
          format: date-time
          examples:
            - '2024-10-13T14:00:00Z'
        plannedReturnTime:
          description: Planned return time
          type: string
          format: date-time
          examples:
            - '2024-10-13T18:00:00Z'

    BicyclePickup:
      description: Event payload when a booked bicycle is picked up
      type: object
      required:
        - pickupId
        - bookingId
        - bicycle
        - customer
        - pickedUpAt
      properties:
        pickupId:
          description: Unique identifier for this pickup event
          type: string
          format: uuid
          examples:
            - 8b9c0d1e-2f3a-4b5c-6d7e-8f9a0b1c2d3e
        bookingId:
          description: Reference to the booking
          type: string
          format: uuid
          examples:
            - 7a8b9c0d-1e2f-3a4b-5c6d-7e8f9a0b1c2d
        bicycle:
          $ref: '#/components/schemas/Bicycle'
        customer:
          $ref: '#/components/schemas/Customer'
        pickupLocation:
          $ref: '#/components/schemas/Location'
        pickedUpAt:
          description: Actual pickup timestamp
          type: string
          format: date-time
          examples:
            - '2024-10-13T14:05:00Z'
        unlockCode:
          description: Code used to unlock the bicycle
          type: string
          minLength: 4
          maxLength: 10
          examples:
            - '1234'

    BicycleUnlock:
      description: Event payload when a bicycle lock is unlocked
      type: object
      required:
        - unlockId
        - bicycle
        - lock
        - unlockedAt
      properties:
        unlockId:
          description: Unique identifier for this unlock event
          type: string
          format: uuid
          examples:
            - 9c0d1e2f-3a4b-5c6d-7e8f-9a0b1c2d3e4f
        bicycle:
          $ref: '#/components/schemas/Bicycle'
        lock:
          $ref: '#/components/schemas/Lock'
        customer:
          $ref: '#/components/schemas/Customer'
        unlockMethod:
          description: Method used to unlock
          type: string
          enum:
            - CODE
            - MOBILE_APP
            - RFID_CARD
            - STAFF_OVERRIDE
          examples:
            - CODE
        unlockedAt:
          description: Timestamp when lock was unlocked
          type: string
          format: date-time
          examples:
            - '2024-10-13T14:05:30Z'
        location:
          $ref: '#/components/schemas/Location'

    MessageHeader:
      description: Header information for each message
      type: object
      required:
        - correlationId
        - messageId
        - x-api-identifier
        - x-api-version
      properties:
        correlationId:
          description: Identifier to trace end-to-end journey
          type: string
          format: uuid
          examples:
            - a1b2c3d4-e5f6-7a8b-9c0d-1e2f3a4b5c6d
        messageId:
          description: Unique identifier for this message
          type: string
          format: uuid
          examples:
            - b2c3d4e5-f6a7-8b9c-0d1e-2f3a4b5c6d7e
        x-api-identifier:
          description: Identifier of the API
          type: string
          format: uuid
          default: 8a2f3c5d-7e9a-4b1c-9d2e-5f6a7b8c9d0e
          examples:
            - 8a2f3c5d-7e9a-4b1c-9d2e-5f6a7b8c9d0e
        x-api-version:
          description: Version of the API
          type: string
          x-extensible-enum:
            - 1.0.0
          default: 1.0.0
          examples:
            - 1.0.0
        source:
          description: Application name creating the message
          type: string
          minLength: 2
          maxLength: 20
          examples:
            - BicycleDistribution

  securitySchemes:
    user-password:
      type: userPassword
      description: Security scheme for event authentication