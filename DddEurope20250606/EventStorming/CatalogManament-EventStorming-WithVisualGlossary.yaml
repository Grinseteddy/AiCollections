openapi: 3.1.0
info:
  title: Library Catalog Management API
  description: API for managing library catalog entries and bibliographic data
  version: 1.0.0
  x-api-id: 2a4f6c8e-9d1b-4e32-bb15-934a7fef5219
  x-audience: external-public

servers:
  - url: 'https://api.library.com/v1'

security:
  - openIdConnect:
      - catalog:read
      - catalog:write
      - catalog:admin

tags:
  - name: Catalog
    description: Catalog entry management operations
  - name: Authors
    description: Author management operations
  - name: Search
    description: Search and discovery operations

paths:
  /catalog/entries:
    get:
      operationId: getCatalogEntries
      tags:
        - Catalog
      security:
        - openIdConnect:
            - catalog:read
      parameters:
        - $ref: '#/components/parameters/AuthorParameter'
        - $ref: '#/components/parameters/ISBNParameter'
        - $ref: '#/components/parameters/TitleParameter'
        - $ref: '#/components/parameters/LimitParameter'
        - $ref: '#/components/parameters/OffsetParameter'
        - $ref: '#/components/parameters/VersionParameter'
      responses:
        '200':
          $ref: '#/components/responses/CatalogEntryListResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '500':
          $ref: '#/components/responses/ServiceNotAvailableResponse'

    post:
      operationId: createCatalogEntry
      tags:
        - Catalog
      security:
        - openIdConnect:
            - catalog:write
      requestBody:
        $ref: '#/components/requestBodies/CatalogEntryCreateRequest'
      responses:
        '201':
          $ref: '#/components/responses/CatalogEntryCreatedResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '500':
          $ref: '#/components/responses/ServiceNotAvailableResponse'

  /catalog/entries/{catalogId}:
    get:
      operationId: getCatalogEntryById
      tags:
        - Catalog
      parameters:
        - $ref: '#/components/parameters/CatalogIdParameter'
      responses:
        '200':
          $ref: '#/components/responses/CatalogEntryResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'

    put:
      operationId: updateCatalogEntry
      tags:
        - Catalog
      security:
        - openIdConnect:
            - catalog:write
      parameters:
        - $ref: '#/components/parameters/CatalogIdParameter'
      requestBody:
        $ref: '#/components/requestBodies/CatalogEntryUpdateRequest'
      responses:
        '200':
          $ref: '#/components/responses/CatalogEntryResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'

    delete:
      operationId: deleteCatalogEntry
      tags:
        - Catalog
      security:
        - openIdConnect:
            - catalog:admin
      parameters:
        - $ref: '#/components/parameters/CatalogIdParameter'
      responses:
        '204':
          description: Catalog entry deleted successfully
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'

  /authors:
    get:
      operationId: getAuthors
      tags:
        - Authors
      security:
        - openIdConnect:
            - catalog:read
      parameters:
        - $ref: '#/components/parameters/AuthorNameParameter'
        - $ref: '#/components/parameters/LimitParameter'
        - $ref: '#/components/parameters/OffsetParameter'
      responses:
        '200':
          $ref: '#/components/responses/AuthorListResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'

    post:
      operationId: createAuthor
      tags:
        - Authors
      security:
        - openIdConnect:
            - catalog:write
      requestBody:
        $ref: '#/components/requestBodies/AuthorCreateRequest'
      responses:
        '201':
          $ref: '#/components/responses/AuthorCreatedResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'

  /authors/{authorId}:
    get:
      operationId: getAuthorById
      tags:
        - Authors
      parameters:
        - $ref: '#/components/parameters/AuthorIdParameter'
      responses:
        '200':
          $ref: '#/components/responses/AuthorResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'

  /search:
    get:
      operationId: searchCatalog
      tags:
        - Search
      parameters:
        - name: q
          in: query
          description: Search query
          required: true
          schema:
            type: string
            minLength: 1
            maxLength: 200
        - name: searchType
          in: query
          description: Type of search
          schema:
            type: string
            enum: [title, author, isbn, keyword]
            default: keyword
        - $ref: '#/components/parameters/LimitParameter'
        - $ref: '#/components/parameters/OffsetParameter'
      responses:
        '200':
          $ref: '#/components/responses/SearchResultsResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'

components:
  parameters:
    CatalogIdParameter:
      name: catalogId
      in: path
      required: true
      schema:
        type: string
        format: uuid

    AuthorIdParameter:
      name: authorId
      in: path
      required: true
      schema:
        type: string
        format: uuid

    AuthorParameter:
      name: author
      in: query
      description: Filter by author name
      schema:
        type: string

    AuthorNameParameter:
      name: name
      in: query
      description: Search by author name
      schema:
        type: string

    ISBNParameter:
      name: isbn
      in: query
      description: Filter by ISBN (10 or 13 digit)
      schema:
        type: string
        pattern: '^(?:ISBN(?:-1[03])?:? )?(?=[0-9X]{10}$|(?=(?:[0-9]+[- ]){3})[- 0-9X]{13}$|97[89][0-9]{10}$|(?=(?:[0-9]+[- ]){4})[- 0-9]{17}$)(?:97[89][- ]?)?[0-9]{1,5}[- ]?[0-9]+[- ]?[0-9]+[- ]?[0-9X]$'

    TitleParameter:
      name: title
      in: query
      description: Filter by title
      schema:
        type: string

    LimitParameter:
      name: limit
      in: query
      description: Maximum number of results to return
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20

    OffsetParameter:
      name: offset
      in: query
      description: Number of results to skip
      schema:
        type: integer
        minimum: 0
        default: 0

    VersionParameter:
      name: x-version
      in: header
      required: true
      schema:
        type: string
        default: "1.0.0"
        enum: ["1.0.0"]

  schemas:
    CatalogEntry:
      type: object
      required:
        - catalogIdentifier
        - title
        - authors
        - isbn
      properties:
        catalogIdentifier:
          type: string
          format: uuid
          description: Unique identifier for the catalog entry
        title:
          type: string
          minLength: 1
          maxLength: 500
          description: Title of the work
        authors:
          type: array
          items:
            $ref: '#/components/schemas/Author'
          minItems: 1
          description: List of authors
        isbn:
          $ref: '#/components/schemas/ISBN'
        abstract:
          type: string
          maxLength: 2000
          description: Abstract or summary of the work
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        createdBy:
          type: string
          description: ID of the librarian who created the entry
          readOnly: true

    CatalogEntryCreate:
      type: object
      required:
        - title
        - authors
        - isbn
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 500
        authors:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/AuthorCreate'
              - type: string
                format: uuid
                description: Reference to existing author by ID
          minItems: 1
        isbn:
          $ref: '#/components/schemas/ISBNCreate'
        abstract:
          type: string
          maxLength: 2000

    CatalogEntryUpdate:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 500
        authors:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/AuthorCreate'
              - type: string
                format: uuid
          minItems: 1
        isbn:
          $ref: '#/components/schemas/ISBNCreate'
        abstract:
          type: string
          maxLength: 2000

    Author:
      type: object
      required:
        - authorIdentifier
        - name
      properties:
        authorIdentifier:
          type: string
          format: uuid
          description: Unique identifier for the author
        name:
          type: string
          minLength: 1
          maxLength: 200
          description: Full name of the author
        givenName:
          type: string
          maxLength: 100
          description: Given name or first name
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true

    AuthorCreate:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 200
        givenName:
          type: string
          maxLength: 100

    ISBN:
      type: object
      required:
        - value
        - type
      properties:
        value:
          type: string
          description: The ISBN value
        type:
          type: string
          enum: [ISBN-10, ISBN-13]
          description: ISBN format type
        formatted:
          type: string
          readOnly: true
          description: Formatted ISBN with hyphens

    ISBNCreate:
      type: object
      required:
        - value
        - type
      properties:
        value:
          type: string
          pattern: '^(?:[0-9]{9}X|[0-9]{10}|[0-9]{13})$'
          description: ISBN value without formatting
        type:
          type: string
          enum: [ISBN-10, ISBN-13]

    SearchResult:
      type: object
      properties:
        catalogEntries:
          type: array
          items:
            $ref: '#/components/schemas/CatalogEntry'
        totalCount:
          type: integer
          minimum: 0
        query:
          type: string
        searchType:
          type: string

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
        message:
          type: string
        details:
          type: object

  responses:
    CatalogEntryResponse:
      description: Single catalog entry response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CatalogEntry'

    CatalogEntryListResponse:
      description: List of catalog entries
      content:
        application/json:
          schema:
            type: object
            properties:
              items:
                type: array
                items:
                  $ref: '#/components/schemas/CatalogEntry'
              totalCount:
                type: integer
                minimum: 0
              limit:
                type: integer
              offset:
                type: integer

    CatalogEntryCreatedResponse:
      description: Catalog entry created successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CatalogEntry'

    AuthorResponse:
      description: Single author response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Author'

    AuthorListResponse:
      description: List of authors
      content:
        application/json:
          schema:
            type: object
            properties:
              items:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
              totalCount:
                type: integer
                minimum: 0

    AuthorCreatedResponse:
      description: Author created successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Author'

    SearchResultsResponse:
      description: Search results
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SearchResult'

    BadRequestResponse:
      description: Invalid request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    NotFoundResponse:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    ForbiddenResponse:
      description: Access forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    ServiceNotAvailableResponse:
      description: Service unavailable
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  requestBodies:
    CatalogEntryCreateRequest:
      description: Catalog entry creation request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CatalogEntryCreate'

    CatalogEntryUpdateRequest:
      description: Catalog entry update request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CatalogEntryUpdate'

    AuthorCreateRequest:
      description: Author creation request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthorCreate'

  securitySchemes:
    openIdConnect:
      type: openIdConnect
      openIdConnectUrl: https://auth.library.com/.well-known/openid-configuration