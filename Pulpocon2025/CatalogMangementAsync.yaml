asyncapi: 3.0.0
info:
  title: Catalog Management
  version: 1.0.0
  description: |
    AsyncAPI specification for Catalog Management bounded context.
    Manages catalog entries and publishes events about catalog operations.
  contact:
    name: Catalog Management Team
    url: https://catalog.organization.com
    email: catalog.team@organization.com
servers:
  production:
    host: "events.{your organization}.com:9092"
    protocol: "kafka"
    description: "Production broker"
    security:
      - $ref: '#/components/securitySchemes/user-password'

defaultContentType:
  application/json

channels:
  bookPurchasedEventIn:
    address: "catalog/bookPurchasedIn"
    messages:
      bookPurchasedEventIn:
        $ref: '#/components/messages/bookPurchasedEventIn'

  catalogEntryCreatedEventOut:
    address: "catalog/catalogEntryCreatedOut"
    messages:
      catalogEntryCreatedEventOut:
        $ref: '#/components/messages/catalogEntryCreatedEventOut'

  catalogEntryUpdatedEventOut:
    address: "catalog/catalogEntryUpdatedOut"
    messages:
      catalogEntryUpdatedEventOut:
        $ref: '#/components/messages/catalogEntryUpdatedEventOut'

  catalogEntryDeletedEventOut:
    address: "catalog/catalogEntryDeletedOut"
    messages:
      catalogEntryDeletedEventOut:
        $ref: '#/components/messages/catalogEntryDeletedEventOut'

operations:
  bookPurchasedEventIn:
    action: "receive"
    channel:
      $ref: "#/channels/bookPurchasedEventIn"

  catalogEntryCreatedEventOut:
    action: "send"
    channel:
      $ref: '#/channels/catalogEntryCreatedEventOut'

  catalogEntryUpdatedEventOut:
    action: "send"
    channel:
      $ref: '#/channels/catalogEntryUpdatedEventOut'

  catalogEntryDeletedEventOut:
    action: "send"
    channel:
      $ref: '#/channels/catalogEntryDeletedEventOut'

components:
  messages:
    bookPurchasedEventIn:
      headers:
        $ref: '#/components/schemas/MessageHeader'
      payload:
        $ref: '#/components/schemas/BookPurchased'

    catalogEntryCreatedEventOut:
      headers:
        $ref: '#/components/schemas/MessageHeader'
      payload:
        $ref: '#/components/schemas/CatalogEntryCreated'

    catalogEntryUpdatedEventOut:
      headers:
        $ref: '#/components/schemas/MessageHeader'
      payload:
        $ref: '#/components/schemas/CatalogEntryUpdated'

    catalogEntryDeletedEventOut:
      headers:
        $ref: '#/components/schemas/MessageHeader'
      payload:
        $ref: '#/components/schemas/CatalogEntryDeleted'

  schemas:
    BookPurchased:
      description: Event received when a book is purchased
      type: object
      required:
        - isbn
        - title
        - purchaseTimestamp
      properties:
        isbn:
          $ref: '#/components/schemas/ISBN'
        title:
          $ref: '#/components/schemas/Title'
        subtitle:
          $ref: '#/components/schemas/Subtitle'
        author:
          $ref: '#/components/schemas/Author'
        publisher:
          $ref: '#/components/schemas/Publisher'
        purchaseTimestamp:
          type: string
          format: date-time
          description: Timestamp when the book was purchased

    CatalogEntryCreated:
      description: Event published when a catalog entry is created
      type: object
      required:
        - catalogEntryId
        - title
        - isbn
        - createdTimestamp
      properties:
        catalogEntryId:
          $ref: '#/components/schemas/CatalogEntryId'
        title:
          $ref: '#/components/schemas/Title'
        subtitle:
          $ref: '#/components/schemas/Subtitle'
        abstract:
          $ref: '#/components/schemas/Abstract'
        isbn:
          $ref: '#/components/schemas/ISBN'
        author:
          $ref: '#/components/schemas/Author'
        publisher:
          $ref: '#/components/schemas/Publisher'
        labels:
          type: array
          items:
            $ref: '#/components/schemas/Label'
        createdTimestamp:
          type: string
          format: date-time
          description: Timestamp when the catalog entry was created

    CatalogEntryUpdated:
      description: Event published when a catalog entry is updated
      type: object
      required:
        - catalogEntryId
        - updatedTimestamp
      properties:
        catalogEntryId:
          $ref: '#/components/schemas/CatalogEntryId'
        title:
          $ref: '#/components/schemas/Title'
        subtitle:
          $ref: '#/components/schemas/Subtitle'
        abstract:
          $ref: '#/components/schemas/Abstract'
        isbn:
          $ref: '#/components/schemas/ISBN'
        author:
          $ref: '#/components/schemas/Author'
        publisher:
          $ref: '#/components/schemas/Publisher'
        labels:
          type: array
          items:
            $ref: '#/components/schemas/Label'
        updatedTimestamp:
          type: string
          format: date-time
          description: Timestamp when the catalog entry was updated

    CatalogEntryDeleted:
      description: Event published when a catalog entry is deleted
      type: object
      required:
        - catalogEntryId
        - deletedTimestamp
      properties:
        catalogEntryId:
          $ref: '#/components/schemas/CatalogEntryId'
        deletedTimestamp:
          type: string
          format: date-time
          description: Timestamp when the catalog entry was deleted

    CatalogEntryId:
      description: Unique identifier for a catalog entry
      type: string
      format: uuid
      examples:
        - a1b2c3d4-e5f6-7890-abcd-ef1234567890

    Title:
      description: Title of the book
      type: string
      minLength: 1
      maxLength: 255
      examples:
        - "The Art of Software Architecture"

    Subtitle:
      description: Subtitle of the book
      type: string
      maxLength: 255
      examples:
        - "Design Decisions and Trade-offs"

    Abstract:
      description: Abstract or summary of the book
      type: string
      maxLength: 2000
      examples:
        - "This book provides comprehensive guidance on software architecture principles and practices."

    ISBN:
      description: International Standard Book Number
      type: string
      pattern: '^(97[89])?[0-9]{9}[0-9X]$'
      examples:
        - "9781234567890"
        - "123456789X"

    Author:
      description: Author information
      type: object
      required:
        - authorId
        - authorName
      properties:
        authorId:
          $ref: '#/components/schemas/AuthorId'
        authorName:
          $ref: '#/components/schemas/AuthorName'
        authorGivenName:
          $ref: '#/components/schemas/AuthorGivenName'

    AuthorId:
      description: Unique identifier for an author
      type: string
      format: uuid
      examples:
        - b2c3d4e5-f6g7-8901-bcde-f23456789012

    AuthorName:
      description: Author's full name or surname
      type: string
      minLength: 1
      maxLength: 100
      examples:
        - "Smith"
        - "Johnson"

    AuthorGivenName:
      description: Author's given name or first name
      type: string
      maxLength: 100
      examples:
        - "John"
        - "Jane"

    Publisher:
      description: Publisher information
      type: string
      minLength: 1
      maxLength: 100
      examples:
        - "Tech Publishing House"
        - "Academic Press"

    Label:
      description: Label or tag associated with a catalog entry
      type: string
      minLength: 1
      maxLength: 50
      examples:
        - "software-architecture"
        - "programming"
        - "technical"

    MessageHeader:
      description: Header Information for each message
      type: object
      required:
        - correlationId
        - messageId
      properties:
        correlationId:
          description: Identifier to be set by application to trace end-to-end-api-journey
          type: string
          format: uuid
          examples:
            - b3416449-5f69-4cd2-a6c4-1ff82da96bce
        messageId:
          description: Identifier for the particular message, is needed in case of cascading infrastructure
          type: string
          format: uuid
          examples:
            - 5a1d305b-19f3-46eb-ada1-9a9770e56fd1
        source:
          description: Application name creating the message
          type: string
          minLength: 2
          maxLength: 20
          examples:
            - CatalogManagement

  securitySchemes:
    user-password:
      type: userPassword
      description: Security scheme for events