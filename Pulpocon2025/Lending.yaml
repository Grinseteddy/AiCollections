openapi: 3.1.0
info:
  title: Lending Books API
  description: API for managing book lending operations, member management, and loan transactions
  contact:
    email: lending-api@example.com
    name: Library Lending Team
    url: https://api.library.example.com
  version: 1.0.0
  x-api-id: lending-books-api-002
  x-audience: internal
servers:
  - url: 'https://api.library.example.com/lending'
security:
  - openIdConnect:
      - lending:read
      - lending:write
      - lending:admin
tags:
  - name: Members
    description: Library member management
  - name: Books
    description: Physical book inventory management
  - name: Loans
    description: Book lending and borrowing operations

paths:
  /members:
    get:
      description: Retrieve all library members with optional filtering
      operationId: getMembers
      tags:
        - Members
      security:
        - openIdConnect:
            - lending:read
      parameters:
        - $ref: '#/components/parameters/MemberNameSearchParameter'
        - $ref: '#/components/parameters/MemberStatusParameter'
        - $ref: '#/components/parameters/PageParameter'
        - $ref: '#/components/parameters/SizeParameter'
        - $ref: '#/components/parameters/VersionParameter'
      responses:
        '200':
          $ref: '#/components/responses/MemberListResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '500':
          $ref: '#/components/responses/ServiceNotAvailableResponse'
        default:
          $ref: '#/components/responses/DefaultResponse'

    post:
      description: Register a new library member
      operationId: createMember
      tags:
        - Members
      security:
        - openIdConnect:
            - lending:write
      parameters:
        - $ref: '#/components/parameters/VersionParameter'
      requestBody:
        $ref: '#/components/requestBodies/MemberToBeCreatedRequest'
      responses:
        '201':
          $ref: '#/components/responses/LinkToMemberResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '500':
          $ref: '#/components/responses/ServiceNotAvailableResponse'
        default:
          $ref: '#/components/responses/DefaultResponse'

  /members/{memberId}:
    get:
      description: Get detailed information about a specific member
      operationId: getMemberById
      tags:
        - Members
      security:
        - openIdConnect:
            - lending:read
      parameters:
        - $ref: '#/components/parameters/MemberIdParameter'
        - $ref: '#/components/parameters/VersionParameter'
      responses:
        '200':
          $ref: '#/components/responses/SingleMemberResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '500':
          $ref: '#/components/responses/ServiceNotAvailableResponse'
        default:
          $ref: '#/components/responses/DefaultResponse'

    put:
      description: Update member information
      operationId: updateMember
      tags:
        - Members
      security:
        - openIdConnect:
            - lending:write
      parameters:
        - $ref: '#/components/parameters/MemberIdParameter'
        - $ref: '#/components/parameters/VersionParameter'
      requestBody:
        $ref: '#/components/requestBodies/MemberToBeUpdatedRequest'
      responses:
        '200':
          $ref: '#/components/responses/LinkToMemberResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '500':
          $ref: '#/components/responses/ServiceNotAvailableResponse'
        default:
          $ref: '#/components/responses/DefaultResponse'

  /members/{memberId}/loans:
    get:
      description: Get current and historical loans for a member
      operationId: getMemberLoans
      tags:
        - Loans
      security:
        - openIdConnect:
            - lending:read
      parameters:
        - $ref: '#/components/parameters/MemberIdParameter'
        - $ref: '#/components/parameters/LoanStatusParameter'
        - $ref: '#/components/parameters/PageParameter'
        - $ref: '#/components/parameters/SizeParameter'
        - $ref: '#/components/parameters/VersionParameter'
      responses:
        '200':
          $ref: '#/components/responses/LoanListResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '500':
          $ref: '#/components/responses/ServiceNotAvailableResponse'
        default:
          $ref: '#/components/responses/DefaultResponse'

  /books:
    get:
      description: Retrieve available books for lending
      operationId: getAvailableBooks
      tags:
        - Books
      security:
        - openIdConnect:
            - lending:read
      parameters:
        - $ref: '#/components/parameters/BookTitleSearchParameter'
        - $ref: '#/components/parameters/BookISBNSearchParameter'
        - $ref: '#/components/parameters/AvailabilityStatusParameter'
        - $ref: '#/components/parameters/PageParameter'
        - $ref: '#/components/parameters/SizeParameter'
        - $ref: '#/components/parameters/VersionParameter'
      responses:
        '200':
          $ref: '#/components/responses/BookListResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '500':
          $ref: '#/components/responses/ServiceNotAvailableResponse'
        default:
          $ref: '#/components/responses/DefaultResponse'

    post:
      description: Add a new physical book to the lending inventory
      operationId: createBook
      tags:
        - Books
      security:
        - openIdConnect:
            - lending:write
      parameters:
        - $ref: '#/components/parameters/VersionParameter'
      requestBody:
        $ref: '#/components/requestBodies/BookToBeCreatedRequest'
      responses:
        '201':
          $ref: '#/components/responses/LinkToBookResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '500':
          $ref: '#/components/responses/ServiceNotAvailableResponse'
        default:
          $ref: '#/components/responses/DefaultResponse'

  /books/{bookId}:
    get:
      description: Get detailed information about a physical book
      operationId: getBookById
      tags:
        - Books
      security:
        - openIdConnect:
            - lending:read
      parameters:
        - $ref: '#/components/parameters/BookIdParameter'
        - $ref: '#/components/parameters/VersionParameter'
      responses:
        '200':
          $ref: '#/components/responses/SingleBookResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '500':
          $ref: '#/components/responses/ServiceNotAvailableResponse'
        default:
          $ref: '#/components/responses/DefaultResponse'

    put:
      description: Update book information
      operationId: updateBook
      tags:
        - Books
      security:
        - openIdConnect:
            - lending:write
      parameters:
        - $ref: '#/components/parameters/BookIdParameter'
        - $ref: '#/components/parameters/VersionParameter'
      requestBody:
        $ref: '#/components/requestBodies/BookToBeUpdatedRequest'
      responses:
        '200':
          $ref: '#/components/responses/LinkToBookResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '500':
          $ref: '#/components/responses/ServiceNotAvailableResponse'
        default:
          $ref: '#/components/responses/DefaultResponse'

  /loans:
    get:
      description: Get all loans with optional filtering
      operationId: getAllLoans
      tags:
        - Loans
      security:
        - openIdConnect:
            - lending:read
      parameters:
        - $ref: '#/components/parameters/LoanStatusParameter'
        - $ref: '#/components/parameters/OverdueParameter'
        - $ref: '#/components/parameters/PageParameter'
        - $ref: '#/components/parameters/SizeParameter'
        - $ref: '#/components/parameters/VersionParameter'
      responses:
        '200':
          $ref: '#/components/responses/LoanListResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '500':
          $ref: '#/components/responses/ServiceNotAvailableResponse'
        default:
          $ref: '#/components/responses/DefaultResponse'

    post:
      description: Create a new loan (member borrows a book)
      operationId: createLoan
      tags:
        - Loans
      security:
        - openIdConnect:
            - lending:write
      parameters:
        - $ref: '#/components/parameters/VersionParameter'
      requestBody:
        $ref: '#/components/requestBodies/LoanToBeCreatedRequest'
      responses:
        '201':
          $ref: '#/components/responses/LinkToLoanResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '409':
          $ref: '#/components/responses/ConflictResponse'
        '500':
          $ref: '#/components/responses/ServiceNotAvailableResponse'
        default:
          $ref: '#/components/responses/DefaultResponse'

  /loans/{loanId}:
    get:
      description: Get detailed information about a specific loan
      operationId: getLoanById
      tags:
        - Loans
      security:
        - openIdConnect:
            - lending:read
      parameters:
        - $ref: '#/components/parameters/LoanIdParameter'
        - $ref: '#/components/parameters/VersionParameter'
      responses:
        '200':
          $ref: '#/components/responses/SingleLoanResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '500':
          $ref: '#/components/responses/ServiceNotAvailableResponse'
        default:
          $ref: '#/components/responses/DefaultResponse'

    put:
      description: Update loan information (extend due date, etc.)
      operationId: updateLoan
      tags:
        - Loans
      security:
        - openIdConnect:
            - lending:write
      parameters:
        - $ref: '#/components/parameters/LoanIdParameter'
        - $ref: '#/components/parameters/VersionParameter'
      requestBody:
        $ref: '#/components/requestBodies/LoanToBeUpdatedRequest'
      responses:
        '200':
          $ref: '#/components/responses/LinkToLoanResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '500':
          $ref: '#/components/responses/ServiceNotAvailableResponse'
        default:
          $ref: '#/components/responses/DefaultResponse'

  /loans/{loanId}/return:
    post:
      description: Return a borrowed book
      operationId: returnBook
      tags:
        - Loans
      security:
        - openIdConnect:
            - lending:write
      parameters:
        - $ref: '#/components/parameters/LoanIdParameter'
        - $ref: '#/components/parameters/VersionParameter'
      requestBody:
        $ref: '#/components/requestBodies/BookReturnRequest'
      responses:
        '200':
          $ref: '#/components/responses/SuccessfulOperationResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '409':
          $ref: '#/components/responses/ConflictResponse'
        '500':
          $ref: '#/components/responses/ServiceNotAvailableResponse'
        default:
          $ref: '#/components/responses/DefaultResponse'

components:
  parameters:
    MemberIdParameter:
      name: memberId
      description: Member identifier
      required: true
      in: path
      schema:
        type: string
        format: uuid
        examples:
          - 448b5bc-a9bc-4036-8899-c77f781a76d5

    BookIdParameter:
      name: bookId
      description: Book identifier
      required: true
      in: path
      schema:
        type: string
        format: uuid
        examples:
          - 123e4567-e89b-12d3-a456-426614174000

    LoanIdParameter:
      name: loanId
      description: Loan identifier
      required: true
      in: path
      schema:
        type: string
        format: uuid
        examples:
          - 550e8400-e29b-41d4-a716-446655440000

    MemberNameSearchParameter:
      name: name
      description: Search members by name
      in: query
      required: false
      schema:
        type: string
        minLength: 2
        maxLength: 100
        examples:
          - "John Smith"

    MemberStatusParameter:
      name: status
      description: Filter members by status
      in: query
      required: false
      schema:
        type: string
        enum:
          - ACTIVE
          - SUSPENDED
          - EXPIRED
        examples:
          - ACTIVE

    BookTitleSearchParameter:
      name: title
      description: Search books by title
      in: query
      required: false
      schema:
        type: string
        minLength: 2
        maxLength: 200
        examples:
          - "Pride and Prejudice"

    BookISBNSearchParameter:
      name: isbn
      description: Search books by ISBN
      in: query
      required: false
      schema:
        type: string
        pattern: '^(978|979)-?\d{1,5}-?\d{1,7}-?\d{1,7}-?\d{1}$'
        examples:
          - "978-3-16-148410-0"

    AvailabilityStatusParameter:
      name: availability
      description: Filter books by availability status
      in: query
      required: false
      schema:
        type: string
        enum:
          - AVAILABLE
          - BORROWED
          - RESERVED
          - MAINTENANCE
        examples:
          - AVAILABLE

    LoanStatusParameter:
      name: status
      description: Filter loans by status
      in: query
      required: false
      schema:
        type: string
        enum:
          - ACTIVE
          - RETURNED
          - OVERDUE
        examples:
          - ACTIVE

    OverdueParameter:
      name: overdue
      description: Filter for overdue loans only
      in: query
      required: false
      schema:
        type: boolean
        examples:
          - true

    PageParameter:
      name: page
      description: Page number for pagination (0-based)
      in: query
      required: false
      schema:
        type: integer
        minimum: 0
        default: 0
        examples:
          - 0

    SizeParameter:
      name: size
      description: Number of results per page
      in: query
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
        examples:
          - 20

    VersionParameter:
      name: x-version
      description: Version of the API specification
      in: header
      required: true
      schema:
        type: string
        x-extensible-enum:
          - 1.0.0
        default: 1.0.0
        examples:
          - 1.0.0

  responses:
    BadRequestResponse:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    ForbiddenResponse:
      description: Forbidden

    NotFoundResponse:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    ConflictResponse:
      description: Conflict - resource already exists or operation not allowed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    ServiceNotAvailableResponse:
      description: Service not available
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    DefaultResponse:
      description: Unexpected error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    SuccessfulOperationResponse:
      description: Successful operation

    LinkToMemberResponse:
      description: Link to member
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Link"

    LinkToBookResponse:
      description: Link to book
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Link"

    LinkToLoanResponse:
      description: Link to loan
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Link"

    MemberListResponse:
      description: List of library members
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MemberList'

    SingleMemberResponse:
      description: Detailed member information
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Member'

    BookListResponse:
      description: List of books available for lending
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BookList'

    SingleBookResponse:
      description: Detailed book information
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Book'

    LoanListResponse:
      description: List of loans
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LoanList'

    SingleLoanResponse:
      description: Detailed loan information
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Loan'

  requestBodies:
    MemberToBeCreatedRequest:
      description: Create a new library member
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MemberToBeCreated'

    MemberToBeUpdatedRequest:
      description: Update an existing member
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Member'

    BookToBeCreatedRequest:
      description: Add a new physical book to inventory
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BookToBeCreated'

    BookToBeUpdatedRequest:
      description: Update book information
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Book'

    LoanToBeCreatedRequest:
      description: Create a new loan
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LoanToBeCreated'

    LoanToBeUpdatedRequest:
      description: Update loan information
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Loan'

    BookReturnRequest:
      description: Return a borrowed book
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BookReturn'

  schemas:
    Error:
      description: An error object used for error responses
      type: object
      required:
        - title
        - status
        - timestamp
      properties:
        title:
          description: A short description of the problem
          type: string
          minLength: 2
          maxLength: 255
          examples:
            - book-not-available
        detail:
          description: A human-readable description of the problem
          type: string
          examples:
            - The requested book is currently borrowed by another member.
        timestamp:
          description: Point in time when the error occurred
          type: string
          format: date-time
          examples:
            - 2024-07-01T23:32:54+01:00
        traceparent:
          description: Tracking ID of the API journey
          type: string
          pattern: ^[0-9]{2}-[0-9a-z]{16}-[0-9a-z]{8}-[0-9a-z]{1}[0-9a-z]{1}$
          examples:
            - 00-0af7651916cd43dd8448eb211c80319c-b7ad6b7169203331-01
        severity:
          description: Severity of the according error
          type: string
          enum:
            - FATAL
            - ERROR
            - WARNING
            - INFO
          examples:
            - ERROR

    Link:
      description: Link to an entity
      type: object
      required:
        - type
        - link
      properties:
        type:
          description: Type name of the object
          type: string
          minLength: 2
          maxLength: 155
          examples:
            - Member
        link:
          description: URL to the according entity
          type: string
          format: uri
          examples:
            - https://api.library.example.com/lending/members/74d870fa-9e93-4ffd-907e-038c85e8bc20

    Member:
      description: Library member information
      type: object
      allOf:
        - $ref: '#/components/schemas/MemberToBeCreated'
      required:
        - memberId
      properties:
        memberId:
          description: Unique identifier for the member
          type: string
          format: uuid
          examples:
            - a07d62e1-5e2e-4e15-b50d-6ed412175443

    MemberToBeCreated:
      description: Member information for registration
      type: object
      required:
        - firstName
        - lastName
        - email
      properties:
        firstName:
          description: Member's first name
          type: string
          minLength: 1
          maxLength: 100
          examples:
            - "John"
        lastName:
          description: Member's last name
          type: string
          minLength: 1
          maxLength: 100
          examples:
            - "Smith"
        email:
          description: Member's email address
          type: string
          format: email
          examples:
            - "john.smith@example.com"
        phone:
          description: Member's phone number
          type: string
          pattern: '^\+?[\d\s\-\(\)]+$'
          examples:
            - "+1-555-123-4567"
        address:
          description: Member's address
          type: string
          maxLength: 500
          examples:
            - "123 Main St, City, State 12345"
        membershipType:
          description: Type of membership
          type: string
          enum:
            - STANDARD
            - PREMIUM
            - STUDENT
            - SENIOR
          examples:
            - STANDARD
        status:
          description: Current status of the member
          type: string
          enum:
            - ACTIVE
            - SUSPENDED
            - EXPIRED
          examples:
            - ACTIVE

    MemberList:
      description: List of library members
      type: object
      required:
        - members
        - totalElements
        - page
        - size
      properties:
        members:
          type: array
          items:
            $ref: '#/components/schemas/Member'
        totalElements:
          type: integer
          minimum: 0
          examples:
            - 1500
        page:
          type: integer
          minimum: 0
          examples:
            - 0
        size:
          type: integer
          minimum: 1
          examples:
            - 20

    Book:
      description: Physical book available for lending
      type: object
      allOf:
        - $ref: '#/components/schemas/BookToBeCreated'
      required:
        - bookId
      properties:
        bookId:
          description: Unique identifier for the physical book
          type: string
          format: uuid
          examples:
            - 123e4567-e89b-12d3-a456-426614174000

    BookToBeCreated:
      description: Book information for inventory addition
      type: object
      required:
        - title
        - isbn
        - catalogEntryId
      properties:
        title:
          description: Title of the book
          type: string
          minLength: 1
          maxLength: 500
          examples:
            - "Pride and Prejudice"
        isbn:
          description: International Standard Book Number
          type: string
          pattern: '^(978|979)-?\d{1,5}-?\d{1,7}-?\d{1,7}-?\d{1}$'
          examples:
            - "978-0-14-143951-8"
        catalogEntryId:
          description: Reference to catalog entry
          type: string
          format: uuid
          examples:
            - "550e8400-e29b-41d4-a716-446655440000"
        condition:
          description: Physical condition of the book
          type: string
          enum:
            - NEW
            - GOOD
            - FAIR
            - POOR
          examples:
            - GOOD
        location:
          description: Physical location in library (shelf/section)
          type: string
          maxLength: 100
          examples:
            - "Section A, Shelf 15"
        status:
          description: Current availability status
          type: string
          enum:
            - AVAILABLE
            - BORROWED
            - RESERVED
            - MAINTENANCE
          examples:
            - AVAILABLE

    BookList:
      description: List of books
      type: object
      required:
        - books
        - totalElements
        - page
        - size
      properties:
        books:
          type: array
          items:
            $ref: '#/components/schemas/Book'
        totalElements:
          type: integer
          minimum: 0
          examples:
            - 5000
        page:
          type: integer
          minimum: 0
          examples:
            - 0
        size:
          type: integer
          minimum: 1
          examples:
            - 20

    Loan:
      description: Book loan information
      type: object
      allOf:
        - $ref: '#/components/schemas/LoanToBeCreated'
      required:
        - loanId
        - loanDate
      properties:
        loanId:
          description: Unique identifier for the loan
          type: string
          format: uuid
          examples:
            - 550e8400-e29b-41d4-a716-446655440000
        loanDate:
          description: Date when the book was borrowed
          type: string
          format: date
          examples:
            - "2024-07-01"
        returnDate:
          description: Date when the book was returned (null if still borrowed)
          type: string
          format: date
          nullable: true
          examples:
            - "2024-07-15"

    LoanToBeCreated:
      description: Loan information for creation
      type: object
      required:
        - memberId
        - bookId
        - dueDate
      properties:
        memberId:
          description: ID of the member borrowing the book
          type: string
          format: uuid
          examples:
            - "a07d62e1-5e2e-4e15-b50d-6ed412175443"
        bookId:
          description: ID of the book being borrowed
          type: string
          format: uuid
          examples:
            - "123e4567-e89b-12d3-a456-426614174000"
        dueDate:
          description: Date when the book should be returned
          type: string
          format: date
          examples:
            - "2024-07-21"
        status:
          description: Current status of the loan
          type: string
          enum:
            - ACTIVE
            - RETURNED
            - OVERDUE
          examples:
            - ACTIVE

    LoanList:
      description: List of loans
      type: object
      required:
        - loans
        - totalElements
        - page
        - size
      properties:
        loans:
          type: array
          items:
            $ref: '#/components/schemas/Loan'
        totalElements:
          type: integer
          minimum: 0
          examples:
            - 750
        page:
          type: integer
          minimum: 0
          examples:
            - 0
        size:
          type: integer
          minimum: 1
          examples:
            - 20

    BookReturn:
      description: Information for returning a book
      type: object
      properties:
        returnDate:
          description: Date of return (defaults to current date if not specified)
          type: string
          format: date
          examples:
            - "2024-07-15"
        condition:
          description: Condition of the book upon return
          type: string
          enum:
            - NEW
            - GOOD
            - FAIR
            - POOR
            - DAMAGED
          examples:
            - GOOD
        notes:
          description: Additional notes about the return
          type: string
          maxLength: 500
          examples:
            - "Book returned in good condition"

  securitySchemes:
    openIdConnect:
      type: openIdConnect
      description: Security scheme for lending operations
      openIdConnectUrl: "https://idp.library.example.com/configuration"