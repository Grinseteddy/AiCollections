openapi: 3.0.3
info:
  title: Library Lending API
  description: API for managing book lending, borrowing, reservations, and member transactions
  version: 1.0.0
  contact:
    name: Library System Support
    email: support@library.org

servers:
  - url: https://api.library.org/lending/v1
    description: Production server
  - url: https://staging-api.library.org/lending/v1
    description: Staging server

security:
  - BearerAuth: []
  - MemberAuth: []

tags:
  - name: Members
    description: Library member management
  - name: Borrowing
    description: Book borrowing operations
  - name: Reservations
    description: Book reservation management
  - name: Transactions
    description: Lending transaction history

paths:
  /members/{memberId}/profile:
    get:
      tags:
        - Members
      summary: Get member profile
      description: Retrieve member information and current lending status
      parameters:
        - name: memberId
          in: path
          required: true
          description: Unique identifier of the library member
          schema:
            type: string
      responses:
        '200':
          description: Member profile information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberProfile'
              example:
                id: "M12345"
                name: "John Doe"
                email: "john.doe@email.com"
                membershipType: "standard"
                memberSince: "2020-01-15"
                status: "active"
                currentBorrowings: 3
                maxBorrowings: 5
                overdueItems: 0
                totalFines: 0.00
                reservations: 1
        '404':
          description: Member not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: []
        - MemberAuth: []

  /members/{memberId}/borrowed-books:
    get:
      tags:
        - Members
      summary: Get member's borrowed books
      description: Retrieve all books currently borrowed by a member
      parameters:
        - name: memberId
          in: path
          required: true
          description: Unique identifier of the library member
          schema:
            type: string
        - name: includeHistory
          in: query
          description: Include historical borrowing records
          required: false
          schema:
            type: boolean
            default: false
        - name: status
          in: query
          description: Filter by borrowing status
          required: false
          schema:
            type: string
            enum: [active, overdue, returned]
      responses:
        '200':
          description: List of borrowed books
          content:
            application/json:
              schema:
                type: object
                properties:
                  borrowedBooks:
                    type: array
                    items:
                      $ref: '#/components/schemas/BorrowedBook'
                  summary:
                    $ref: '#/components/schemas/BorrowingSummary'
              example:
                borrowedBooks:
                  - id: "BR001"
                    bookId: "B001"
                    title: "The Great Gatsby"
                    isbn: "978-0-7432-7356-5"
                    borrowDate: "2025-09-01T10:00:00Z"
                    dueDate: "2025-09-15T23:59:59Z"
                    status: "active"
                    renewalsUsed: 0
                    maxRenewals: 2
                summary:
                  totalActive: 3
                  totalOverdue: 0
                  totalReturned: 47

  /books/{bookId}/borrow:
    post:
      tags:
        - Borrowing
      summary: Borrow a book
      description: Process a book borrowing request for a library member
      parameters:
        - name: bookId
          in: path
          required: true
          description: Unique identifier of the book to borrow
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - memberId
              properties:
                memberId:
                  type: string
                  description: ID of the member borrowing the book
                lendingPeriodDays:
                  type: integer
                  minimum: 1
                  maximum: 30
                  default: 14
                  description: Number of days for the lending period
            example:
              memberId: "M12345"
              lendingPeriodDays: 14
      responses:
        '201':
          description: Book successfully borrowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BorrowTransaction'
              example:
                id: "BR001"
                bookId: "B001"
                memberId: "M12345"
                borrowDate: "2025-09-19T14:30:00Z"
                dueDate: "2025-10-03T23:59:59Z"
                status: "active"
                renewalsUsed: 0
                maxRenewals: 2
        '400':
          description: Invalid borrowing request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "BORROWING_LIMIT_EXCEEDED"
                message: "Member has reached maximum borrowing limit"
                details:
                  currentBorrowings: 5
                  maxBorrowings: 5
        '404':
          description: Book or member not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Book not available for borrowing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "BOOK_NOT_AVAILABLE"
                message: "Book is currently checked out"
                details:
                  availableCopies: 0
                  nextAvailableDate: "2025-09-25"

  /borrowed-books/{borrowId}/return:
    post:
      tags:
        - Borrowing
      summary: Return a borrowed book
      description: Process the return of a borrowed book
      parameters:
        - name: borrowId
          in: path
          required: true
          description: Unique identifier of the borrowing transaction
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                condition:
                  type: string
                  enum: [excellent, good, fair, damaged, lost]
                  default: good
                notes:
                  type: string
                  description: Any notes about the book condition
            example:
              condition: "good"
              notes: "Book returned in excellent condition"
      responses:
        '200':
          description: Book successfully returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  borrowTransaction:
                    $ref: '#/components/schemas/BorrowTransaction'
                  fines:
                    type: array
                    items:
                      $ref: '#/components/schemas/Fine'
                  returnDate:
                    type: string
                    format: date-time
              example:
                borrowTransaction:
                  id: "BR001"
                  status: "returned"
                  returnDate: "2025-09-19T16:45:00Z"
                fines: []
                returnDate: "2025-09-19T16:45:00Z"
        '404':
          description: Borrowing transaction not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /borrowed-books/{borrowId}/renew:
    post:
      tags:
        - Borrowing
      summary: Renew a borrowed book
      description: Extend the due date of a borrowed book
      parameters:
        - name: borrowId
          in: path
          required: true
          description: Unique identifier of the borrowing transaction
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                extensionDays:
                  type: integer
                  minimum: 1
                  maximum: 14
                  default: 14
            example:
              extensionDays: 14
      responses:
        '200':
          description: Book successfully renewed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BorrowTransaction'
              example:
                id: "BR001"
                bookId: "B001"
                memberId: "M12345"
                borrowDate: "2025-09-01T10:00:00Z"
                dueDate: "2025-09-29T23:59:59Z"
                renewalDate: "2025-09-19T16:45:00Z"
                status: "active"
                renewalsUsed: 1
                maxRenewals: 2
        '400':
          description: Renewal not allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "RENEWAL_LIMIT_EXCEEDED"
                message: "Maximum renewals already used"
                details:
                  renewalsUsed: 2
                  maxRenewals: 2

  /books/{bookId}/reserve:
    post:
      tags:
        - Reservations
      summary: Reserve a book
      description: Create a reservation for a book that is currently unavailable
      parameters:
        - name: bookId
          in: path
          required: true
          description: Unique identifier of the book to reserve
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - memberId
              properties:
                memberId:
                  type: string
                  description: ID of the member making the reservation
                priority:
                  type: string
                  enum: [normal, urgent]
                  default: normal
                notes:
                  type: string
            example:
              memberId: "M12345"
              priority: "normal"
              notes: "Needed for research project"
      responses:
        '201':
          description: Reservation successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
              example:
                id: "R001"
                bookId: "B001"
                memberId: "M12345"
                reservationDate: "2025-09-19T14:30:00Z"
                status: "active"
                queuePosition: 3
                estimatedAvailableDate: "2025-10-05"
                expiryDate: "2025-10-12T23:59:59Z"
        '400':
          description: Invalid reservation request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Book is available or member already has reservation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /reservations/{reservationId}:
    get:
      tags:
        - Reservations
      summary: Get reservation details
      description: Retrieve details of a specific reservation
      parameters:
        - name: reservationId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Reservation details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'

    delete:
      tags:
        - Reservations
      summary: Cancel reservation
      description: Cancel an active reservation
      parameters:
        - name: reservationId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Reservation successfully cancelled
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  cancellationDate:
                    type: string
                    format: date-time
        '404':
          description: Reservation not found

  /members/{memberId}/transactions:
    get:
      tags:
        - Transactions
      summary: Get member transaction history
      description: Retrieve lending transaction history for a member
      parameters:
        - name: memberId
          in: path
          required: true
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: fromDate
          in: query
          description: Filter transactions from this date
          schema:
            type: string
            format: date
        - name: toDate
          in: query
          description: Filter transactions to this date
          schema:
            type: string
            format: date
        - name: transactionType
          in: query
          schema:
            type: string
            enum: [borrow, return, renewal, reservation, fine]
      responses:
        '200':
          description: Transaction history
          content:
            application/json:
              schema:
                type: object
                properties:
                  transactions:
                    type: array
                    items:
                      $ref: '#/components/schemas/Transaction'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for API authentication
    MemberAuth:
      type: apiKey
      in: header
      name: X-Member-Token
      description: Member session token

  schemas:
    MemberProfile:
      type: object
      required:
        - id
        - name
        - email
        - membershipType
        - status
      properties:
        id:
          type: string
          description: Unique member identifier
        name:
          type: string
          description: Member's full name
        email:
          type: string
          format: email
        phone:
          type: string
        membershipType:
          type: string
          enum: [student, faculty, staff, community, premium]
        memberSince:
          type: string
          format: date
        status:
          type: string
          enum: [active, suspended, expired, inactive]
        currentBorrowings:
          type: integer
          minimum: 0
        maxBorrowings:
          type: integer
          minimum: 0
        overdueItems:
          type: integer
          minimum: 0
        totalFines:
          type: number
          format: decimal
          minimum: 0
        reservations:
          type: integer
          minimum: 0

    BorrowedBook:
      type: object
      required:
        - id
        - bookId
        - memberId
        - borrowDate
        - dueDate
        - status
      properties:
        id:
          type: string
          description: Unique borrowing transaction identifier
        bookId:
          type: string
        memberId:
          type: string
        title:
          type: string
          description: Book title for convenience
        isbn:
          type: string
        borrowDate:
          type: string
          format: date-time
        dueDate:
          type: string
          format: date-time
        returnDate:
          type: string
          format: date-time
        renewalDate:
          type: string
          format: date-time
        status:
          type: string
          enum: [active, overdue, returned, lost]
        renewalsUsed:
          type: integer
          minimum: 0
        maxRenewals:
          type: integer
          minimum: 0
        condition:
          type: string
          enum: [excellent, good, fair, damaged, lost]
        fines:
          type: array
          items:
            $ref: '#/components/schemas/Fine'

    BorrowTransaction:
      type: object
      required:
        - id
        - bookId
        - memberId
        - borrowDate
        - dueDate
        - status
      properties:
        id:
          type: string
        bookId:
          type: string
        memberId:
          type: string
        borrowDate:
          type: string
          format: date-time
        dueDate:
          type: string
          format: date-time
        returnDate:
          type: string
          format: date-time
        renewalDate:
          type: string
          format: date-time
        status:
          type: string
          enum: [active, overdue, returned, lost]
        renewalsUsed:
          type: integer
          minimum: 0
          default: 0
        maxRenewals:
          type: integer
          minimum: 0
          default: 2
        condition:
          type: string
          enum: [excellent, good, fair, damaged, lost]
        notes:
          type: string

    Reservation:
      type: object
      required:
        - id
        - bookId
        - memberId
        - reservationDate
        - status
      properties:
        id:
          type: string
          description: Unique reservation identifier
        bookId:
          type: string
        memberId:
          type: string
        title:
          type: string
          description: Book title for convenience
        reservationDate:
          type: string
          format: date-time
        status:
          type: string
          enum: [active, fulfilled, cancelled, expired]
        queuePosition:
          type: integer
          minimum: 1
        estimatedAvailableDate:
          type: string
          format: date
        notificationDate:
          type: string
          format: date-time
          description: When member was notified book is available
        expiryDate:
          type: string
          format: date-time
          description: When reservation expires if not fulfilled
        priority:
          type: string
          enum: [normal, urgent]
        notes:
          type: string

    Fine:
      type: object
      required:
        - id
        - type
        - amount
        - status
      properties:
        id:
          type: string
        type:
          type: string
          enum: [overdue, damage, lost_book, processing]
        amount:
          type: number
          format: decimal
          minimum: 0
        currency:
          type: string
          default: USD
        status:
          type: string
          enum: [pending, paid, waived, disputed]
        description:
          type: string
        accrualDate:
          type: string
          format: date-time
        dueDate:
          type: string
          format: date-time
        paidDate:
          type: string
          format: date-time

    Transaction:
      type: object
      required:
        - id
        - memberId
        - type
        - date
      properties:
        id:
          type: string
        memberId:
          type: string
        bookId:
          type: string
        type:
          type: string
          enum: [borrow, return, renewal, reservation, fine, payment]
        date:
          type: string
          format: date-time
        description:
          type: string
        amount:
          type: number
          format: decimal
        details:
          type: object
          description: Transaction-specific additional details

    BorrowingSummary:
      type: object
      properties:
        totalActive:
          type: integer
          minimum: 0
        totalOverdue:
          type: integer
          minimum: 0
        totalReturned:
          type: integer
          minimum: 0
        totalFines:
          type: number
          format: decimal
          minimum: 0
        averageBorrowingPeriod:
          type: number
          description: Average borrowing period in days

    Pagination:
      type: object
      required:
        - limit
        - offset
        - total
        - hasMore
      properties:
        limit:
          type: integer
          minimum: 1
        offset:
          type: integer
          minimum: 0
        total:
          type: integer
          minimum: 0
        hasMore:
          type: boolean

    Error:
      type: object
      required:
        - error
        - message
      properties:
        error:
          type: string
          description: Error type identifier
        message:
          type: string
          description: Human-readable error message
        details:
          type: object
          description: Additional error details
        timestamp:
          type: string
          format: date-time